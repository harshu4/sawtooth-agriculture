/* eslint-disable functional/no-expression-statement */
import { join } from 'path';
import alias from '@rollup/plugin-alias';
import test from 'ava';
import { launch } from 'puppeteer';
import { rollup } from 'rollup';
import commonjs from 'rollup-plugin-commonjs';
import nodeResolve from 'rollup-plugin-node-resolve';
const prepareCode = async () => {
    // eslint-disable-next-line no-console
    const realConsoleWarn = console.warn;
    /**
     * Suppress Rollup warning: `Use of eval is strongly discouraged, as it poses
     * security risks and may cause issues with minification`
     */
    // eslint-disable-next-line no-console, functional/immutable-data
    console.warn = (suppress) => suppress;
    const bundle = await rollup({
        // eslint-disable-next-line no-undef
        input: join(__dirname, 'hash.browser.bench.helper.js'),
        plugins: [
            alias({
                entries: {
                    chuhai: './../../../bench/chuhai.js',
                    'hash.js': './../../../bench/hash.js'
                }
            }),
            commonjs(),
            nodeResolve()
        ]
    });
    // eslint-disable-next-line no-console, require-atomic-updates, functional/immutable-data
    console.warn = realConsoleWarn;
    const result = await bundle.generate({
        format: 'esm'
    });
    return result.output[0].code;
};
const preparePage = async () => {
    const browser = await launch({
        args: ['--no-sandbox', '--disable-setuid-sandbox']
        // devtools: true
    });
    const page = await browser.newPage();
    // https://github.com/GoogleChrome/puppeteer/issues/2301#issuecomment-379622459
    await page.goto('file:///');
    return { browser, page };
};
(async () => {
    const [code, { browser, page }] = await Promise.all([
        prepareCode(),
        preparePage()
    ]);
    test(`# browser: ${await browser.version()}`, async (t) => {
        page.on('console', msg => {
            // eslint-disable-next-line no-console
            console.log(msg.text());
        });
        page.on('error', err => {
            // eslint-disable-next-line no-console
            console.error(`error: ${String(err)}`);
        });
        // cspell: disable-next-line
        page.on('pageerror', err => {
            // eslint-disable-next-line no-console
            console.error(`pageerror: ${String(err)}`); // cspell: disable-line
        });
        // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor
        await new Promise(async (resolve) => {
            await page.exposeFunction('benchError', (error) => {
                // eslint-disable-next-line no-console
                console.error(error);
            });
            await page.exposeFunction('benchComplete', async () => {
                // eslint-disable-next-line no-console
                console.log('Browser benchmark complete, closing browser.');
                await browser.close();
                t.pass();
                resolve();
            });
            await page.setContent(`<script type="module">${code}</script>`);
        });
    });
})().catch(err => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5icm93c2VyLmJlbmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jcnlwdG8vaGFzaC5icm93c2VyLmJlbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVEQUF1RDtBQUN2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVCLE9BQU8sS0FBSyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDaEMsT0FBTyxRQUFRLE1BQU0sd0JBQXdCLENBQUM7QUFDOUMsT0FBTyxXQUFXLE1BQU0sNEJBQTRCLENBQUM7QUFFckQsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDN0Isc0NBQXNDO0lBQ3RDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDckM7OztPQUdHO0lBQ0gsaUVBQWlFO0lBQ2pFLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFFOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUM7UUFDMUIsb0NBQW9DO1FBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLDhCQUE4QixDQUFDO1FBQ3RELE9BQU8sRUFBRTtZQUNQLEtBQUssQ0FBQztnQkFDSixPQUFPLEVBQUU7b0JBQ1AsTUFBTSxFQUFFLDRCQUE0QjtvQkFDcEMsU0FBUyxFQUFFLDBCQUEwQjtpQkFDdEM7YUFDRixDQUFDO1lBQ0YsUUFBUSxFQUFFO1lBQ1YsV0FBVyxFQUFFO1NBQ2Q7S0FDRixDQUFDLENBQUM7SUFDSCx5RkFBeUY7SUFDekYsT0FBTyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUM7SUFFL0Is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