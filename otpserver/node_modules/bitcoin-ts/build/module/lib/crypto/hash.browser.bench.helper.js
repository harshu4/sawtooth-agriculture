/* global window, crypto */
/* eslint-disable functional/no-let, init-declarations, functional/no-expression-statement, functional/no-conditional-statement */
import * as asmCrypto from 'asmcrypto.js';
import suite from 'chuhai';
import * as hashJs from 'hash.js';
import { instantiateRipemd160, instantiateSha1, instantiateSha256, instantiateSha512 } from './crypto';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isUint8Array = (array) => array?.constructor?.name === 'Uint8Array';
const compare = (a, b) => {
    if (!isUint8Array(a) || !isUint8Array(b) || a.toString() !== b.toString()) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        benchError(`\nInvalid result: ${a} is not equal to ${b}\n`);
    }
};
const randomBytes = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
const singlePassBrowserBenchmark = async (hashFunction, hashFunctionName, inputLength, subtleCryptoAlgorithmName) => suite(`browser: ${hashFunctionName}: hash a ${inputLength}-byte input`, s => {
    let message = randomBytes(inputLength);
    let hash;
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(hash, hashFunction.hash(message));
        }
        message = randomBytes(inputLength);
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.hash(message);
    });
    s.bench('hash.js', () => {
        hash = new Uint8Array(hashJs[hashFunctionName]()
            .update(message)
            .digest());
    });
    if (typeof subtleCryptoAlgorithmName === 'string') {
        s.bench('crypto.subtle', deferred => {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            window.crypto.subtle
                .digest(subtleCryptoAlgorithmName, message)
                .then(buffer => {
                hash = new Uint8Array(buffer);
                deferred.resolve();
            });
        }, {
            defer: true
        });
        const Algorithm = subtleCryptoAlgorithmName === 'SHA-1'
            ? asmCrypto.Sha1
            : subtleCryptoAlgorithmName === 'SHA-256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const MB = 1000000;
const incrementalBrowserBenchmark = async (hashFunction, hashFunctionName, totalInput, chunkSize) => suite(`browser: ${hashFunctionName}: incrementally hash a ${totalInput /
    MB}MB input in ${chunkSize / MB}MB chunks`, s => {
    let message;
    let messageChunks;
    let hash;
    const nextCycle = () => {
        /**
         * We can't get this much entropy, so we just use 0s here.
         */
        message = new Uint8Array(totalInput).fill(0);
        const chunkCount = Math.ceil(message.length / chunkSize);
        messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
    };
    nextCycle();
    s.cycle(() => {
        if (hash === null) {
            benchError(`asmcrypto.js produced a null result given message: ${message.toString()}`);
        }
        else {
            compare(new Uint8Array(hash), hashFunction.hash(message));
        }
        nextCycle();
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
    });
    s.bench('hash.js', () => {
        hash = messageChunks
            .reduce((state, chunk) => state.update(chunk), hashJs[hashFunctionName]())
            .digest();
    });
    if (hashFunctionName !== 'ripemd160') {
        const Algorithm = hashFunctionName === 'sha1'
            ? asmCrypto.Sha1
            : hashFunctionName === 'sha256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new Algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const browserBenchmarks = async (func, name, subtle) => {
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    await singlePassBrowserBenchmark(func, name, 32, subtle);
    await singlePassBrowserBenchmark(func, name, 100, subtle);
    await singlePassBrowserBenchmark(func, name, 1000, subtle);
    await singlePassBrowserBenchmark(func, name, 10000, subtle);
    await incrementalBrowserBenchmark(func, name, MB * 32, MB);
    /* eslint-enable @typescript-eslint/no-magic-numbers */
};
(async () => {
    const sha1 = await instantiateSha1();
    const sha256 = await instantiateSha256();
    const sha512 = await instantiateSha512();
    const ripemd160 = await instantiateRipemd160();
    await browserBenchmarks(sha1, 'sha1', 'SHA-1');
    await browserBenchmarks(sha256, 'sha256', 'SHA-256');
    await browserBenchmarks(sha512, 'sha512', 'SHA-512');
    await browserBenchmarks(ripemd160, 'ripemd160');
    benchComplete();
})().catch(err => {
    // eslint-disable-next-line no-console
    console.error(err);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5icm93c2VyLmJlbmNoLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY3J5cHRvL2hhc2guYnJvd3Nlci5iZW5jaC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCO0FBQzNCLGtJQUFrSTtBQUNsSSxPQUFPLEtBQUssU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEtBQUssTUFBTSxRQUFRLENBQUM7QUFDM0IsT0FBTyxLQUFLLE1BQU0sTUFBTSxTQUFTLENBQUM7QUFJbEMsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNsQixNQUFNLFVBQVUsQ0FBQztBQU9sQiw4REFBOEQ7QUFDOUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFVLEVBQXVCLEVBQUUsQ0FDdkQsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEtBQUssWUFBWSxDQUFDO0FBRTVDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBYyxFQUFFLENBQWMsRUFBRSxFQUFFO0lBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN6RSw0RUFBNEU7UUFDNUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUNwQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFaEQsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLEVBQ3RDLFlBQTBCLEVBQzFCLGdCQUE0RCxFQUM1RCxXQUFtQixFQUNu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