import { binToHex } from './hex';
const defaultStringifySpacing = 2;
/**
 * A safe method to `JSON.stringify` a value, useful for debugging and logging
 * purposes.
 *
 * @remarks
 * Without modifications, `JSON.stringify` has several shortcomings in
 * debugging and logging usage:
 * - throws when serializing anything containing a `bigint`
 * - `Uint8Array`s are often serialized in base 10 with newlines between each
 *   index item
 * - `functions` and `symbols` are not clearly marked
 *
 * This method is more helpful in these cases:
 * - `bigint`: `0n` => `<bigint: 0n>`
 * - `Uint8Array`: `Uint8Array.of(0,0)` => `<Uint8Array: 0x0000>`
 * - `function`: `(x) => x * 2` => `<function: (x) => x * 2>`
 * - `symbol`: `Symbol(A)` => `<symbol: Symbol(A)>`
 *
 * @param value the data to serialize
 * @param spacing the number of spaces to use in
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const stringify = (value, spacing = defaultStringifySpacing) => JSON.stringify(value, 
// eslint-disable-next-line complexity
(_, item) => {
    const type = typeof item;
    const name = type === 'object' ? item.constructor?.name : type;
    switch (name) {
        case 'Uint8Array':
            return `<Uint8Array: 0x${binToHex(item)}>`;
        case 'bigint':
            return `<bigint: ${item.toString()}n>`;
        case 'function':
        case 'symbol':
            return `<${name}: ${item.toString()}>`;
        default:
            return item;
    }
}, spacing);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy9sb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUVqQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsQ0FBQztBQUVsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSCw4REFBOEQ7QUFDOUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFFLE9BQU8sR0FBRyx1QkFBdUIsRUFBRSxFQUFFLENBQ3pFLElBQUksQ0FBQyxTQUFTLENBQ1osS0FBSztBQUNMLHNDQUFzQztBQUN0QyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNWLE1BQU0sSUFBSSxHQUFHLE9BQU8sSUFBSSxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUNSLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDaEUsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLFlBQVk7WUFDZixPQUFPLGtCQUFrQixRQUFRLENBQUMsSUFBa0IsQ0FBQyxHQUFHLENBQUM7UUFDM0QsS0FBSyxRQUFRO1lBQ1gsT0FBTyxZQUFhLElBQWUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDO1FBQ3JELEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssUUFBUTtZQUNYLE9BQU8sSUFBSSxJQUFJLEtBQU0sSUFBMEIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO1FBRWhFO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUMsRUFDRCxPQUFPLENBQ1IsQ0FBQyJ9