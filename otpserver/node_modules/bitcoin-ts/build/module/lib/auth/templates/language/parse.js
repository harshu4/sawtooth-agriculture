import * as P from './parsimmon.js';
/**
 * TODO: `@types/parsimmon` is not in use because of some early hacks. Ideally,
 * this can be cleaned up by converting parsimmon.js to TypeScript, and trimming
 * out the parts we don't need.
 */
/* eslint-disable sort-keys */
const authenticationScriptParser = P.createLanguage({
    script: r => P.seqMap(P.optWhitespace, r.expression.sepBy(P.optWhitespace).node('Script'), P.optWhitespace, (_, expressions) => expressions),
    expression: r => P.alt(r.comment, r.push, r.evaluation, r.utf8, r.hex, r.bigint, r.identifier),
    comment: r => P.alt(r.singleLineComment, r.multiLineComment).node('Comment'),
    singleLineComment: () => P.seqMap(P.string('//').desc("the start of a single-line comment ('//')"), P.regexp(/[^\n]*/u), (__, comment) => comment.trim()),
    multiLineComment: () => P.seqMap(P.string('/*').desc("the start of a multi-line comment ('/*')"), P.regexp(/[\s\S]*(?=\*\/)/u).desc("the end of this multi-line comment ('*/')"), P.string('*/'), (__, comment) => comment.trim()),
    push: r => P.seqMap(P.string('<').desc("the start of a push statement ('<')"), r.script, P.string('>').desc("the end of this push statement ('>')"), (_, push) => push).node('Push'),
    evaluation: r => P.seqMap(P.string('$').desc("the start of an evaluation ('$')"), P.string('(').desc("the opening parenthesis of this evaluation ('(')"), r.script, P.string(')').desc("the closing parenthesis of this evaluation (')')"), (_, __, evaluation) => evaluation).node('Evaluation'),
    identifier: () => P.regexp(/[a-zA-Z_][.a-zA-Z0-9_-]*/u)
        .desc('a valid identifier')
        .node('Identifier'),
    utf8: () => P.alt(P.seqMap(P.string('"').desc('a double quote (")'), P.regexp(/[^"]*/u), P.string('"').desc('a closing double quote (")'), (__, literal) => literal), P.seqMap(P.string("'").desc("a single quote (')"), P.regexp(/[^']*/u), P.string("'").desc("a closing single quote (')"), (__, literal) => literal)).node('UTF8Literal'),
    hex: () => P.seqMap(P.string('0x').desc("a hex literal ('0x...')"), P.regexp(/(?:[0-9a-f]{2})+/iu).desc('a valid hexadecimal string'), (__, literal) => literal).node('HexLiteral'),
    bigint: () => P.regexp(/-?[0-9]+/u)
        .desc('an integer literal')
        .map(BigInt)
        .node('BigIntLiteral')
});
export const parseScript = (script) => authenticationScriptParser.script.parse(script);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvdGVtcGxhdGVzL2xhbmd1YWdlL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxDQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEM7Ozs7R0FJRztBQUNILDhCQUE4QjtBQUM5QixNQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFDbEQsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQ1YsQ0FBQyxDQUFDLE1BQU0sQ0FDTixDQUFDLENBQUMsYUFBYSxFQUNmLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ2xELENBQUMsQ0FBQyxhQUFhLEVBQ2YsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQ2hDO0lBQ0gsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQ2QsQ0FBQyxDQUFDLEdBQUcsQ0FDSCxDQUFDLENBQUMsT0FBTyxFQUNULENBQUMsQ0FBQyxJQUFJLEVBQ04sQ0FBQyxDQUFDLFVBQVUsRUFDWixDQUFDLENBQUMsSUFBSSxFQUNOLENBQUMsQ0FBQyxHQUFHLEVBQ0wsQ0FBQyxDQUFDLE1BQU0sRUFDUixDQUFDLENBQUMsVUFBVSxDQUNiO0lBQ0gsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUM1RSxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FDdEIsQ0FBQyxDQUFDLE1BQU0sQ0FDTixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQywyQ0FBMkMsQ0FB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