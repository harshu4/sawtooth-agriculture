import { getResolutionErrors } from './errors';
import { parseScript } from './parse';
import { reduceScript } from './reduce';
import { createIdentifierResolver, resolveScriptSegment } from './resolve';
var Formatting;
(function (Formatting) {
    Formatting[Formatting["requiresCommas"] = 3] = "requiresCommas";
    Formatting[Formatting["requiresOr"] = 2] = "requiresOr";
})(Formatting || (Formatting = {}));
/**
 * The constant used by the parser to denote the end of the input
 */
const EOF = 'EOF';
/**
 * A text-formatting method to pretty-print the list of expected inputs
 * (`Encountered unexpected input while parsing script. Expected ...`). If
 * present, the `EOF` expectation is always moved to the end of the list.
 * @param expectedArray the alphabetized list of expected inputs produced by
 * `parseScript`
 */
const describeExpectedInput = (expectedArray) => {
    const newArray = expectedArray.filter(value => value !== EOF);
    // eslint-disable-next-line functional/no-conditional-statement
    if (newArray.length !== expectedArray.length) {
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        newArray.push('the end of the script');
    }
    const withoutLastElement = newArray.slice(0, newArray.length - 1);
    const lastElement = newArray[newArray.length - 1];
    return `Encountered unexpected input while parsing script. Expected ${newArray.length >= Formatting.requiresCommas
        ? withoutLastElement.join(', ').concat(`, or ${lastElement}`)
        : newArray.length === Formatting.requiresOr
            ? newArray.join(' or ')
            : lastElement}.`;
};
/**
 * Note, `compileScript` is the recommended API for using this method.
 */
export const compileScriptText = (script, data, environment, scriptId) => {
    const parseResult = parseScript(script);
    if (!parseResult.status) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: describeExpectedInput(parseResult.expected),
                    range: {
                        endColumn: parseResult.index.column,
                        endLineNumber: parseResult.index.line,
                        startColumn: parseResult.index.column,
                        startLineNumber: parseResult.index.line
                    }
                }
            ],
            success: false
        };
    }
    const resolver = createIdentifierResolver(scriptId, data, environment);
    const resolvedScript = resolveScriptSegment(parseResult.value, resolver);
    const resolutionErrors = getResolutionErrors(resolvedScript);
    if (resolutionErrors.length !== 0) {
        return {
            errorType: 'resolve',
            errors: resolutionErrors,
            parse: parseResult.value,
            resolve: resolvedScript,
            success: false
        };
    }
    const reduction = reduceScript(resolvedScript, environment.vm, environment.createState);
    return {
        ...(reduction.errors === undefined
            ? { bytecode: reduction.bytecode, success: true }
            : { errorType: 'reduce', errors: reduction.errors, success: false }),
        parse: parseResult.value,
        reduce: reduction,
        resolve: resolvedScript
    };
};
/**
 * Parse, resolve, and reduce the provided BTL script using the provided`data`
 * and `environment`.
 */
export const compileScript = (scriptId, data, environment) => {
    const script = environment.scripts[scriptId];
    if (script === undefined) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: `No script with an ID of '${scriptId}' was provided in the compilation environment.`,
                    range: {
                        endColumn: 0,
                        endLineNumber: 0,
                        startColumn: 0,
                        startLineNumber: 0
                    }
                }
            ],
            success: false
        };
    }
    return compileScriptText(script, data, environment, scriptId);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC90ZW1wbGF0ZXMvbGFuZ3VhZ2UvY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0MsT0FBTyxFQUFvQixXQUFXLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBcUMsTUFBTSxVQUFVLENBQUM7QUFDM0UsT0FBTyxFQUdMLHdCQUF3QixFQUd4QixvQkFBb0IsRUFDckIsTUFBTSxXQUFXLENBQUM7QUE0RG5CLElBQUssVUFHSjtBQUhELFdBQUssVUFBVTtJQUNiLCtEQUFrQixDQUFBO0lBQ2xCLHVEQUFjLENBQUE7QUFDaEIsQ0FBQyxFQUhJLFVBQVUsS0FBVixVQUFVLFFBR2Q7QUFFRDs7R0FFRztBQUNILE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLHFCQUFxQixHQUFHLENBQUMsYUFBdUIsRUFBRSxFQUFFO0lBQ3hELE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDOUQsK0RBQStEO0lBQy9ELElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsTUFBTSxFQUFFO1FBQzVDLHlGQUF5RjtRQUN6RixRQUFRLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDeEM7SUFDRCxNQUFNLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFD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