import { serializeOutpoints, serializeOutput, serializeOutputsForSigning, serializeSequenceNumbers } from '../../../transaction';
import { arithmeticOperations } from './arithmetic';
import { bitwiseOperations } from './bitwise';
import { conditionallyEvaluate, incrementOperationCount, mapOverOperations } from './combinators';
import { cryptoOperations } from './crypto';
import { applyError, AuthenticationErrorCommon } from './errors';
import { conditionalFlowControlOperations, reservedOperation, unconditionalFlowControlOperations } from './flow-control';
import { disabledOperations, nonOperations } from './nop';
import { OpcodesCommon } from './opcodes';
import { pushNumberOperations, pushOperations } from './push';
import { spliceOperations } from './splice';
import { stackOperations } from './stack';
import { timeOperations } from './time';
export * from './arithmetic';
export * from './bitwise';
export * from './combinators';
export * from './crypto';
export * from './descriptions';
export * from './encoding';
export * from './errors';
export * from './flow-control';
export * from './nop';
export * from './opcodes';
export * from './push';
export * from './signing-serialization';
export * from './splice';
export * from './stack';
export * from './time';
export * from './types';
export var ConsensusCommon;
(function (ConsensusCommon) {
    /**
     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumStackItemLength"] = 520] = "maximumStackItemLength";
    ConsensusCommon[ConsensusCommon["maximumScriptNumberLength"] = 4] = "maximumScriptNumberLength";
    /**
     * A.K.A. `MAX_OPS_PER_SCRIPT`
     */
    ConsensusCommon[ConsensusCommon["maximumOperationCount"] = 201] = "maximumOperationCount";
    /**
     * A.K.A. `MAX_SCRIPT_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumBytecodeLength"] = 10000] = "maximumBytecodeLength";
    /**
     * A.K.A. `MAX_STACK_SIZE`
     */
    ConsensusCommon[ConsensusCommon["maximumStackDepth"] = 1000] = "maximumStackDepth";
})(ConsensusCommon || (ConsensusCommon = {}));
export const undefinedOperation = () => ({
    undefined: conditionallyEvaluate((state) => applyError(AuthenticationErrorCommon.unknownOpcode, state))
});
export const checkLimitsCommon = (operation) => (state) => {
    const nextState = operation(state);
    return nextState.stack.length + nextState.alternateStack.length >
        ConsensusCommon.maximumStackDepth
        ? applyError(AuthenticationErrorCommon.exceededMaximumStackDepth, nextState)
        : nextState.operationCount > ConsensusCommon.maximumOperationCount
            ? applyError(AuthenticationErrorCommon.exceededMaximumOperationCount, nextState)
            : nextState;
};
export const commonOperations = (sha1, sha256, ripemd160, secp256k1, flags) => {
    const unconditionalOperations = {
        ...disabledOperations(),
        ...pushOperations(flags),
        ...mapOverOperations(unconditionalFlowControlOperations(flags), incrementOperationCount)
    };
    const conditionalOperations = mapOverOperations({
        ...pushNumberOperations(),
        [OpcodesCommon.OP_RESERVED]: reservedOperation()
    }, conditionallyEvaluate);
    const incrementingOperations = mapOverOperations({
        ...arithmeticOperations(flags),
        ...bitwiseOperations(),
        ...cryptoOperations(sha1, sha256, ripemd160, secp256k1, flags),
        ...conditionalFlowControlOperations(),
        ...stackOperations(flags),
        ...spliceOperations(),
        ...timeOperations(flags),
        ...nonOperations(flags)
    }, conditionallyEvaluate, incrementOperationCount);
    return mapOverOperations({
        ...unconditionalOperations,
        ...incrementingOperations,
        ...conditionalOperations
    }, checkLimitsCommon);
};
export const cloneStack = (stack) => stack.reduce((newStack, element) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    newStack.push(element.slice());
    return newStack;
}, []);
export const createAuthenticationProgramInternalStateCommon = (instructions, stack = []) => ({
    alternateStack: [],
    executionStack: [],
    instructions,
    ip: 0,
    lastCodeSeparator: -1,
    operationCount: 0,
    signatureOperationsCount: 0,
    stack
});
export const createAuthenticationProgramExternalStateCommon = (program) => ({
    correspondingOutput: program.inputIndex < program.spendingTransaction.outputs.length
        ? serializeOutput(program.spendingTransaction.outputs[program.inputIndex])
        : undefined,
    locktime: program.spendingTransaction.locktime,
    outpointIndex: program.spendingTransaction.inputs[program.inputIndex].outpointIndex,
    outpointTransactionHash: program.spendingTransaction.inputs[program.inputIndex]
        .outpointTransactionHash,
    outputValue: program.sourceOutput.satoshis,
    sequenceNumber: program.spendingTransaction.inputs[program.inputIndex].sequenceNumber,
    transactionOutpoints: serializeOutpoints(program.spendingTransaction.inputs),
    transactionOutputs: serializeOutputsForSigning(program.spendingTransaction.outputs),
    transactionSequenceNumbers: serializeSequenceNumbers(program.spendingTransaction.inputs),
    version: program.spendingTransaction.version
});
export const createAuthenticationProgramStateCommon = (instructions, stack, externalState) => ({
    ...createAuthenticationProgramInternalStateCommon(instructions, stack),
    ...externalState
});
export const cloneAuthenticationProgramStateCommon = (state) => ({
    ...(state.error === undefined ? {} : { error: state.error }),
    alternateStack: state.alternateStack.slice(),
    correspondingOutput: state.correspondingOutput,
    executionStack: state.executionStack.slice(),
    instructions: state.instructions.slice(),
    ip: state.ip,
    lastCodeSeparator: state.lastCodeSeparator,
    locktime: state.locktime,
    operationCount: state.operationCount,
    outpointIndex: state.outpointIndex,
    outpointTransactionHash: state.outpointTransactionHash.slice(),
    outputValue: state.outputValue,
    sequenceNumber: state.sequenceNumber,
    signatureOperationsCount: state.signatureOperationsCount,
    stack: state.stack.slice(),
    transactionOutpoints: state.transactionOutpoints,
    transactionOutputs: state.transactionOutputs,
    transactionSequenceNumbers: state.transactionSequenceNumbers,
    version: state.version
});
/**
 * This is a meaningless but complete `CommonExternalProgramState`, useful for
 * testing and debugging.
 */
export const createAuthenticationProgramExternalStateCommonEmpty = () => ({
    correspondingOutput: Uint8Array.of(1 /* correspondingOutput */),
    locktime: 0,
    outpointIndex: 0,
    outpointTransactionHash: new Uint8Array(32 /* length */).fill(5 /* outpointTransactionHash */),
    outputValue: BigInt(0),
    sequenceNumber: 0,
    transactionOutpoints: Uint8Array.of(2 /* transactionOutpoints */),
    transactionOutputs: Uint8Array.of(3 /* transactionOutputs */),
    transactionSequenceNumbers: Uint8Array.of(4 /* transactionSequenceNumbers */),
    version: 0
});
/**
 * Create an "empty" CommonProgramState, suitable for testing a VM/compiler.
 */
export const createAuthenticationProgramStateCommonEmpty = (instructions, stack = []) => ({
    ...createAuthenticationProgramInternalStateCommon(instructions, stack),
    ...createAuthenticationProgramExternalStateCommonEmpty()
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZiwwQkFBMEIsRUFDMUIsd0JBQXdCLEVBQ3pCLE1BQU0sc0JBQXNCLENBQUM7QUFjOUIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM5QyxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFzQyxNQUFNLFVBQVUsQ0FBQztBQUNoRixPQUFPLEVBQUUsVUFBVSxFQUFFLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pFLE9BQU8sRUFDTCxnQ0FBZ0MsRUFDaEMsaUJBQWlCLEVBQ2pCLGtDQUFrQyxFQUNuQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFeEMsY0FBYyxjQUFjLENBQUM7QUFDN0IsY0FBYyxXQUFXLENBQUM7QUFDMUIsY0FBYyxlQUFlLENBQUM7QUFDOUIsY0FB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