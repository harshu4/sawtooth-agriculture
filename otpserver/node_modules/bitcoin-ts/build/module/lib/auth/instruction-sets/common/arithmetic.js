import { combineOperations, pushToStack, useOneScriptNumber, useThreeScriptNumbers, useTwoScriptNumbers } from './combinators';
import { opVerify } from './flow-control';
import { OpcodesCommon } from './opcodes';
import { bigIntToScriptNumber, booleanToScriptNumber } from './types';
export const op1Add = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, bigIntToScriptNumber(value + BigInt(1))), flags.requireMinimalEncoding);
export const op1Sub = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, bigIntToScriptNumber(value - BigInt(1))), flags.requireMinimalEncoding);
export const opNegate = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, bigIntToScriptNumber(-value)), flags.requireMinimalEncoding);
export const opAbs = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, bigIntToScriptNumber(value < 0 ? -value : value)), flags.requireMinimalEncoding);
export const opNot = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, value === BigInt(0)
    ? bigIntToScriptNumber(BigInt(1))
    : bigIntToScriptNumber(BigInt(0))), flags.requireMinimalEncoding);
export const op0NotEqual = (flags) => (state) => useOneScriptNumber(state, (nextState, value) => pushToStack(nextState, value === BigInt(0)
    ? bigIntToScriptNumber(BigInt(0))
    : bigIntToScriptNumber(BigInt(1))), flags.requireMinimalEncoding);
export const opAdd = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, bigIntToScriptNumber(firstValue + secondValue)), flags.requireMinimalEncoding);
export const opSub = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, bigIntToScriptNumber(firstValue - secondValue)), flags.requireMinimalEncoding);
export const opBoolAnd = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== BigInt(0) && secondValue !== BigInt(0))), flags.requireMinimalEncoding);
export const opBoolOr = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== BigInt(0) || secondValue !== BigInt(0))), flags.requireMinimalEncoding);
export const opNumEqual = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue === secondValue)), flags.requireMinimalEncoding);
export const opNumEqualVerify = (flags) => combineOperations(opNumEqual(flags), opVerify());
export const opNumNotEqual = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue !== secondValue)), flags.requireMinimalEncoding);
export const opLessThan = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue < secondValue)), flags.requireMinimalEncoding);
export const opLessThanOrEqual = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue <= secondValue)), flags.requireMinimalEncoding);
export const opGreaterThan = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue > secondValue)), flags.requireMinimalEncoding);
export const opGreaterThanOrEqual = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, booleanToScriptNumber(firstValue >= secondValue)), flags.requireMinimalEncoding);
export const opMin = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, bigIntToScriptNumber(firstValue < secondValue ? firstValue : secondValue)), flags.requireMinimalEncoding);
export const opMax = (flags) => (state) => useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => pushToStack(nextState, bigIntToScriptNumber(firstValue > secondValue ? firstValue : secondValue)), flags.requireMinimalEncoding);
export const opWithin = (flags) => (state) => useThreeScriptNumbers(state, (nextState, firstValue, secondValue, thirdValue) => pushToStack(nextState, booleanToScriptNumber(secondValue <= firstValue && firstValue < thirdValue)), flags.requireMinimalEncoding);
export const arithmeticOperations = (flags) => ({
    [OpcodesCommon.OP_1ADD]: op1Add(flags),
    [OpcodesCommon.OP_1SUB]: op1Sub(flags),
    [OpcodesCommon.OP_NEGATE]: opNegate(flags),
    [OpcodesCommon.OP_ABS]: opAbs(flags),
    [OpcodesCommon.OP_NOT]: opNot(flags),
    [OpcodesCommon.OP_0NOTEQUAL]: op0NotEqual(flags),
    [OpcodesCommon.OP_ADD]: opAdd(flags),
    [OpcodesCommon.OP_SUB]: opSub(flags),
    [OpcodesCommon.OP_BOOLAND]: opBoolAnd(flags),
    [OpcodesCommon.OP_BOOLOR]: opBoolOr(flags),
    [OpcodesCommon.OP_NUMEQUAL]: opNumEqual(flags),
    [OpcodesCommon.OP_NUMEQUALVERIFY]: opNumEqualVerify(flags),
    [OpcodesCommon.OP_NUMNOTEQUAL]: opNumNotEqual(flags),
    [OpcodesCommon.OP_LESSTHAN]: opLessThan(flags),
    [OpcodesCommon.OP_LESSTHANOREQUAL]: opLessThanOrEqual(flags),
    [OpcodesCommon.OP_GREATERTHAN]: opGreaterThan(flags),
    [OpcodesCommon.OP_GREATERTHANOREQUAL]: opGreaterThanOrEqual(flags),
    [OpcodesCommon.OP_MIN]: opMin(flags),
    [OpcodesCommon.OP_MAX]: opMax(flags),
    [OpcodesCommon.OP_WITHIN]: opWithin(flags)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpdGhtZXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi9hcml0aG1ldGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsV0FBVyxFQUNYLGtCQUFrQixFQUNsQixxQkFBcUIsRUFDckIsbUJBQW1CLEVBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV0RSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FHcEIsS0FFRCxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3JCLGtCQUFrQixDQUNoQixLQUFLLEVBQ0wsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FDbkIsV0FBVyxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakUsS0FBSyxDQUFDLHNCQUFzQixDQUM3QixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBR3BCLEtBRUQsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUNyQixrQkFBa0IsQ0FDaEIsS0FBSyxFQUNMLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ25CLFdBQVcsQ0FBQyxTQUFTLEVBQUUsb0JBQW9CLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLEtBQUssQ0FBQyxzQkFBc0IsQ0FDN0IsQ0FBQztBQUVKLE1BQU0sQ0FBQyxN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