export var AuthenticationErrorCommon;
(function (AuthenticationErrorCommon) {
    AuthenticationErrorCommon["calledReserved"] = "Program called an unassigned, reserved operation.";
    AuthenticationErrorCommon["calledReturn"] = "Program called an OP_RETURN operation.";
    AuthenticationErrorCommon["calledUpgradableNop"] = "Program called a disallowed upgradable non-operation (OP_NOP1-OP_NOP10).";
    AuthenticationErrorCommon["checkSequenceUnavailable"] = "Program called an OP_CHECKSEQUENCEVERIFY operation, but OP_CHECKSEQUENCEVERIFY requires transaction version 2 or higher.";
    AuthenticationErrorCommon["disabledOpcode"] = "Program contains a disabled opcode.";
    AuthenticationErrorCommon["emptyAlternateStack"] = "Tried to read from an empty alternate stack.";
    AuthenticationErrorCommon["emptyStack"] = "Tried to read from an empty stack.";
    AuthenticationErrorCommon["exceededMaximumBytecodeLengthLocking"] = "The provided locking bytecode exceeds the maximum bytecode length (10,000 bytes).";
    AuthenticationErrorCommon["exceededMaximumBytecodeLengthUnlocking"] = "The provided unlocking bytecode exceeds the maximum bytecode length (10,000 bytes).";
    AuthenticationErrorCommon["exceededMaximumStackDepth"] = "Program exceeded the maximum stack depth (1,000 items).";
    AuthenticationErrorCommon["exceededMaximumOperationCount"] = "Program exceeded the maximum operation count (201 operations).";
    AuthenticationErrorCommon["exceedsMaximumMultisigPublicKeyCount"] = "Program called an OP_CHECKMULTISIG which exceeds the maximum public key count (20 public keys).";
    AuthenticationErrorCommon["exceedsMaximumPush"] = "Push exceeds the push size limit of 520 bytes.";
    AuthenticationErrorCommon["failedVerify"] = "Program failed an OP_VERIFY operation.";
    AuthenticationErrorCommon["invalidStackIndex"] = "Tried to read from an invalid stack index.";
    AuthenticationErrorCommon["incompatibleLocktimeType"] = "Program called an OP_CHECKLOCKTIMEVERIFY operation with an incompatible locktime type. The transaction locktime and required locktime must both refer to either a block height or a block time.";
    AuthenticationErrorCommon["incompatibleSequenceType"] = "Program called an OP_CHECKSEQUENCEVERIFY operation with an incompatible sequence type flag. The input sequence number and required sequence number must both use the same sequence locktime type.";
    AuthenticationErrorCommon["insufficientPublicKeys"] = "Program called an OP_CHECKMULTISIG operation which requires signatures from more public keys than are provided.";
    AuthenticationErrorCommon["invalidNaturalNumber"] = "Invalid input: the key/signature count inputs for OP_CHECKMULTISIG require a natural number (n > 0).";
    AuthenticationErrorCommon["invalidProtocolBugValue"] = "The OP_CHECKMULTISIG protocol bug value must be a Script Number 0 (to comply with the \"NULLDUMMY\" rule).";
    AuthenticationErrorCommon["invalidPublicKeyEncoding"] = "Encountered an improperly encoded public key.";
    AuthenticationErrorCommon["invalidScriptNumber"] = "Invalid input: this operation requires a valid Script Number.";
    AuthenticationErrorCommon["invalidSignatureEncoding"] = "Encountered an improperly encoded signature.";
    AuthenticationErrorCommon["locktimeDisabled"] = "Program called an OP_CHECKLOCKTIMEVERIFY operation, but locktime is disabled for this transaction.";
    AuthenticationErrorCommon["malformedLockingBytecode"] = "The provided locking bytecode is malformed.";
    AuthenticationErrorCommon["malformedPush"] = "Program must be long enough to push the requested number of bytes.";
    AuthenticationErrorCommon["malformedUnlockingBytecode"] = "The provided unlocking bytecode is malformed.";
    AuthenticationErrorCommon["negativeLocktime"] = "Program called an OP_CHECKLOCKTIMEVERIFY or OP_CHECKSEQUENCEVERIFY operation with a negative locktime.";
    AuthenticationErrorCommon["nonMinimalPush"] = "Push operations must use the smallest possible encoding.";
    AuthenticationErrorCommon["nonNullSignatureFailure"] = "Program failed a signature verification with a non-null signature (violating the \"NULLFAIL\" rule).";
    AuthenticationErrorCommon["schnorrSizedSignatureInCheckMultiSig"] = "Program used a schnorr-sized signature (65 bytes) in an OP_CHECKMULTISIG operation.";
    AuthenticationErrorCommon["unexpectedElse"] = "Encountered an OP_ELSE outside of an OP_IF ... OP_ENDIF block.";
    AuthenticationErrorCommon["unexpectedEndIf"] = "Encountered an OP_ENDIF which is not following a matching OP_IF.";
    AuthenticationErrorCommon["unknownOpcode"] = "Called an unknown opcode.";
    AuthenticationErrorCommon["unmatchedSequenceDisable"] = "Program called an OP_CHECKSEQUENCEVERIFY operation requiring the disable flag, but the input's sequence number is missing the disable flag.";
    AuthenticationErrorCommon["unsatisfiedLocktime"] = "Program called an OP_CHECKLOCKTIMEVERIFY operation which requires a locktime greater than the transaction's locktime.";
    AuthenticationErrorCommon["unsatisfiedSequenceNumber"] = "Program called an OP_CHECKSEQUENCEVERIFY operation which requires a sequence number greater than the input's sequence number.";
})(AuthenticationErrorCommon || (AuthenticationErrorCommon = {}));
/**
 * Applies the `error` to a `state`.
 *
 * @remarks
 * If the state already has an error, this method does not override it.
 * (Evaluation should end after the first encountered error, so further errors
 * aren't relevant.)
 */
export const applyError = (error, state) => ({
    ...state,
    error: state.error === undefined ? error : state.error
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQU4sSUFBWSx5QkFzQ1g7QUF0Q0QsV0FBWSx5QkFBeUI7SUFDbkMsaUdBQW9FLENBQUE7SUFDcEUsb0ZBQXVELENBQUE7SUFDdkQsNkhBQWdHLENBQUE7SUFDaEcsa0xBQXFKLENBQUE7SUFDckosbUZBQXNELENBQUE7SUFDdEQsaUdBQW9FLENBQUE7SUFDcEUsOEVBQWlELENBQUE7SUFDakQsdUpBQTBILENBQUE7SUFDMUgsMkpBQThILENBQUE7SUFDOUgsa0hBQXFGLENBQUE7SUFDckYsNkhBQWdHLENBQUE7SUFDaEcscUtBQXdJLENBQUE7SUFDeEksa0dBQXFFLENBQUE7SUFDckUsb0ZBQXVELENBQUE7SUFDdkQsNkZBQWdFLENBQUE7SUFDaEUseVBBQTROLENBQUE7SUFDNU4sMlBBQThOLENBQUE7SUFDOU4sdUtBQTBJLENBQUE7SUFDMUksMEpBQTZILENBQUE7SUFDN0gsbUtBQW9JLENBQUE7SUFDcEksdUdBQTBFLENBQUE7SUFDMUUsa0hBQXFGLENBQUE7SUFDckYsc0dBQXlFLENBQUE7SUFDekUsb0pBQXVILENBQUE7SUFDdkgscUdBQXdFLENBQUE7SUFDeEUsaUhBQW9GLENBQUE7SUFDcEYseUdBQTRFLENBQUE7SUFDNUUsd0pBQTJILENBQUE7SUFDM0gsd0dBQTJFLENBQUE7SUFDM0UsNkpBQThILENBQUE7SUFDOUgseUpBQTRILENBQUE7SUFDNUgsOEdBQWlGLENBQUE7SUFDakYsaUhBQW9GLENBQUE7SUFDcEYsd0VBQTJDLENBQUE7SUFDM0MscU1BQXdLLENBQUE7SUFDeEssMEtBQTZJLENBQUE7SUFDN0ksd0xBQTJKLENBQUE7QUFDN0osQ0FBQyxFQXRDVyx5QkFBeUIsS0FBekIseUJBQXlCLFFBc0NwQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsS0FBeUMsRUFDekMsS0FBWSxFQUNMLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsR0FBRyxLQUFLO0lBQ1IsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO0NBQ3ZELENBQUMsQ0FBQyJ9