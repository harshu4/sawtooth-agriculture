import { ConsensusBCH } from '../bch/bch-types';
import { serializeAuthenticationInstructions } from '../instruction-sets-utils';
import { combineOperations, pushToStack, useOneScriptNumber, useOneStackItem, useTwoStackItems } from './combinators';
import { booleanToScriptNumber, ConsensusCommon } from './common';
import { decodeBitcoinSignature, isValidPublicKeyEncoding, isValidSignatureEncodingBCHTransaction } from './encoding';
import { applyError, AuthenticationErrorCommon } from './errors';
import { opVerify } from './flow-control';
import { OpcodesCommon } from './opcodes';
import { generateSigningSerializationBCH } from './signing-serialization';
export const opRipemd160 = (ripemd160) => (state) => useOneStackItem(state, (nextState, value) => pushToStack(nextState, ripemd160.hash(value)));
export const opSha1 = (sha1) => (state) => useOneStackItem(state, (nextState, value) => pushToStack(nextState, sha1.hash(value)));
export const opSha256 = (sha256) => (state) => useOneStackItem(state, (nextState, value) => pushToStack(nextState, sha256.hash(value)));
export const opHash160 = (sha256, ripemd160) => (state) => useOneStackItem(state, (nextState, value) => pushToStack(nextState, ripemd160.hash(sha256.hash(value))));
export const opHash256 = (sha256) => (state) => useOneStackItem(state, (nextState, value) => pushToStack(nextState, sha256.hash(sha256.hash(value))));
export const opCodeSeparator = () => (state) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.lastCodeSeparator = state.ip;
    return state;
};
export const opCheckSig = (sha256, secp256k1, flags) => (s) => 
// eslint-disable-next-line complexity
useTwoStackItems(s, (state, bitcoinEncodedSignature, publicKey) => {
    if (!isValidPublicKeyEncoding(publicKey)) {
        return applyError(AuthenticationErrorCommon.invalidPublicKeyEncoding, state);
    }
    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature)) {
        return applyError(AuthenticationErrorCommon.invalidSignatureEncoding, state);
    }
    const coveredBytecode = serializeAuthenticationInstructions(state.instructions).subarray(state.lastCodeSeparator + 1);
    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);
    const serialization = generateSigningSerializationBCH(sha256, state.version, state.transactionOutpoints, state.transactionSequenceNumbers, state.outpointTransactionHash, state.outpointIndex, coveredBytecode, state.outputValue, state.sequenceNumber, state.correspondingOutput, state.transactionOutputs, state.locktime, signingSerializationType);
    const digest = sha256.hash(sha256.hash(serialization));
    const useSchnorr = signature.length === ConsensusBCH.schnorrSignatureLength;
    const success = useSchnorr
        ? secp256k1.verifySignatureSchnorr(signature, publicKey, digest)
        : secp256k1.verifySignatureDERLowS(signature, publicKey, digest);
    return !success &&
        flags.requireNullSignatureFailures &&
        signature.length !== 0
        ? applyError(AuthenticationErrorCommon.nonNullSignatureFailure, state)
        : pushToStack(state, booleanToScriptNumber(success));
});
export const opCheckMultiSig = (sha256, secp256k1, flags) => (s) => useOneScriptNumber(s, (state, publicKeysValue) => {
    const potentialPublicKeys = Number(publicKeysValue);
    if (potentialPublicKeys < 0) {
        return applyError(AuthenticationErrorCommon.invalidNaturalNumber, state);
    }
    if (potentialPublicKeys > 20 /* maximumPublicKeys */) {
        return applyError(AuthenticationErrorCommon.exceedsMaximumMultisigPublicKeyCount, state);
    }
    const publicKeys = 
    // eslint-disable-next-line functional/immutable-data
    potentialPublicKeys > 0 ? state.stack.splice(-potentialPublicKeys) : [];
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.operationCount += potentialPublicKeys;
    return state.operationCount > ConsensusCommon.maximumOperationCount
        ? applyError(AuthenticationErrorCommon.exceededMaximumOperationCount, state)
        : useOneScriptNumber(state, (nextState, approvingKeys) => {
            const requiredApprovingPublicKeys = Number(approvingKeys);
            if (requiredApprovingPublicKeys < 0) {
                return applyError(AuthenticationErrorCommon.invalidNaturalNumber, nextState);
            }
            if (requiredApprovingPublicKeys > potentialPublicKeys) {
                return applyError(AuthenticationErrorCommon.insufficientPublicKeys, nextState);
            }
            const signatures = requiredApprovingPublicKeys > 0
                ? // eslint-disable-next-line functional/immutable-data
                    nextState.stack.splice(-requiredApprovingPublicKeys)
                : [];
            return useOneStackItem(nextState, 
            // eslint-disable-next-line complexity
            (finalState, protocolBugValue) => {
                if (flags.requireBugValueZero &&
                    protocolBugValue.length !== 0) {
                    return applyError(AuthenticationErrorCommon.invalidProtocolBugValue, finalState);
                }
                const coveredBytecode = serializeAuthenticationInstructions(finalState.instructions).subarray(finalState.lastCodeSeparator + 1);
                let approvingPublicKeys = 0; // eslint-disable-line functional/no-let
                let remainingSignatures = signatures.length; // eslint-disable-line functional/no-let
                let remainingPublicKeys = publicKeys.length; // eslint-disable-line functional/no-let
                // eslint-disable-next-line functional/no-loop-statement
                while (remainingSignatures > 0 &&
                    remainingPublicKeys > 0 &&
                    approvingPublicKeys + remainingPublicKeys >=
                        remainingSignatures &&
                    approvingPublicKeys !== requiredApprovingPublicKeys) {
                    const publicKey = publicKeys[remainingPublicKeys - 1];
                    const bitcoinEncodedSignature = signatures[remainingSignatures - 1];
                    if (!isValidPublicKeyEncoding(publicKey)) {
                        return applyError(AuthenticationErrorCommon.invalidPublicKeyEncoding, finalState);
                    }
                    if (!isValidSignatureEncodingBCHTransaction(bitcoinEncodedSignature)) {
                        return applyError(AuthenticationErrorCommon.invalidSignatureEncoding, finalState);
                    }
                    const { signingSerializationType, signature } = decodeBitcoinSignature(bitcoinEncodedSignature);
                    const serialization = generateSigningSerializationBCH(sha256, finalState.version, finalState.transactionOutpoints, finalState.transactionSequenceNumbers, finalState.outpointTransactionHash, finalState.outpointIndex, coveredBytecode, finalState.outputValue, finalState.sequenceNumber, finalState.correspondingOutput, finalState.transactionOutputs, finalState.locktime, signingSerializationType);
                    const digest = sha256.hash(sha256.hash(serialization));
                    if (signature.length === ConsensusBCH.schnorrSignatureLength) {
                        return applyError(AuthenticationErrorCommon.schnorrSizedSignatureInCheckMultiSig, finalState);
                    }
                    const signed = secp256k1.verifySignatureDERLowS(signature, publicKey, digest);
                    // eslint-disable-next-line functional/no-conditional-statement
                    if (signed) {
                        approvingPublicKeys += 1; // eslint-disable-line functional/no-expression-statement
                        remainingSignatures -= 1; // eslint-disable-line functional/no-expression-statement
                    }
                    remainingPublicKeys -= 1; // eslint-disable-line functional/no-expression-statement
                }
                const success = approvingPublicKeys === requiredApprovingPublicKeys;
                if (!success &&
                    flags.requireNullSignatureFailures &&
                    !signatures.every(signature => signature.length === 0)) {
                    return applyError(AuthenticationErrorCommon.nonNullSignatureFailure, finalState);
                }
                return pushToStack(finalState, booleanToScriptNumber(success));
            });
        }, flags.requireMinimalEncoding);
}, flags.requireMinimalEncoding);
export const opCheckSigVerify = (sha256, secp256k1, flags) => combineOperations(opCheckSig(sha256, secp256k1, flags), opVerify());
export const opCheckMultiSigVerify = (sha256, secp256k1, flags) => combineOperations(opCheckMultiSig(sha256, secp256k1, flags), opVerify());
export const cryptoOperations = (sha1, sha256, ripemd160, secp256k1, flags) => ({
    [OpcodesCommon.OP_RIPEMD160]: opRipemd160(ripemd160),
    [OpcodesCommon.OP_SHA1]: opSha1(sha1),
    [OpcodesCommon.OP_SHA256]: opSha256(sha256),
    [OpcodesCommon.OP_HASH160]: opHash160(sha256, ripemd160),
    [OpcodesCommon.OP_HASH256]: opHash256(sha256),
    [OpcodesCommon.OP_CODESEPARATOR]: opCodeSeparator(),
    [OpcodesCommon.OP_CHECKSIG]: opCheckSig(sha256, secp256k1, flags),
    [OpcodesCommon.OP_CHECKSIGVERIFY]: opCheckSigVerify(sha256, secp256k1, flags),
    [OpcodesCommon.OP_CHECKMULTISIG]: opCheckMultiSig(sha256, secp256k1, flags),
    [OpcodesCommon.OP_CHECKMULTISIGVERIFY]: opCheckMultiSigVerify(sha256, secp256k1, flags)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2NyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEYsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsRSxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHdCQUF3QixFQUN4QixzQ0FBc0MsRUFDdkMsTUFBTSxZQUFZLENBQUM7QUFDcEIsT0FBTyxFQUFFLFVBQVUsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUkxRSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FLekIsU0FBb0IsRUFDRixFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN0QyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQzFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM5QyxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBS3BCLElBQVUsRUFDUSxFQUFFLENBQUMsQ0FBQyxL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