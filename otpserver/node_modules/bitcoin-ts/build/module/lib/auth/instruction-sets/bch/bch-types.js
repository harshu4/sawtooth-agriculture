import { getBitcoinTransactionId, serializeTransaction } from '../../../transaction';
import { hexToBin, swapEndianness } from '../../../utils/utils';
export var ConsensusBCH;
(function (ConsensusBCH) {
    ConsensusBCH[ConsensusBCH["schnorrSignatureLength"] = 64] = "schnorrSignatureLength";
})(ConsensusBCH || (ConsensusBCH = {}));
export const createTestAuthenticationProgramBCH = (unlockingBytecode, lockingBytecode, sha256, satoshis = BigInt(0)) => {
    const testFundingTransaction = {
        inputs: [
            {
                outpointIndex: 0xffffffff,
                outpointTransactionHash: hexToBin('0000000000000000000000000000000000000000000000000000000000000000'),
                sequenceNumber: 0xffffffff,
                unlockingBytecode: Uint8Array.of(0, 0)
            }
        ],
        locktime: 0,
        outputs: [{ lockingBytecode, satoshis }],
        version: 1
    };
    const testSpendingTransaction = {
        inputs: [
            {
                outpointIndex: 0,
                outpointTransactionHash: hexToBin(swapEndianness(getBitcoinTransactionId(serializeTransaction(testFundingTransaction), sha256))),
                sequenceNumber: 0xffffffff,
                unlockingBytecode
            }
        ],
        locktime: 0,
        outputs: [{ lockingBytecode: Uint8Array.of(), satoshis }],
        version: 1
    };
    return {
        inputIndex: 0,
        sourceOutput: testFundingTransaction.outputs[0],
        spendingTransaction: testSpendingTransaction
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLXR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvYmNoL2JjaC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLG9CQUFvQixFQUVyQixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFTaEUsTUFBTSxDQUFOLElBQVksWUFFWDtBQUZELFdBQVksWUFBWTtJQUN0QixvRkFBMkIsQ0FBQTtBQUM3QixDQUFDLEVBRlcsWUFBWSxLQUFaLFlBQVksUUFFdkI7QUFZRCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRyxDQUNoRCxpQkFBNkIsRUFDN0IsZUFBMkIsRUFDM0IsTUFBYyxFQUNkLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ3BCLEVBQUU7SUFDRixNQUFNLHNCQUFzQixHQUFnQjtRQUMxQyxNQUFNLEVBQUU7WUFDTjtnQkFDRSxhQUFhLEVBQUUsVUFBVTtnQkFDekIsdUJBQXVCLEVBQUUsUUFBUSxDQUMvQixrRUFBa0UsQ0FDbkU7Z0JBQ0QsY0FBYyxFQUFFLFVBQVU7Z0JBQzFCLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN2QztTQUNGO1FBQ0QsUUFBUSxFQUFFLENBQUM7UUFDWCxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQztRQUN4QyxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUM7SUFDRixNQUFNLHVCQUF1QixHQUFnQjtRQUMzQyxNQUFNLEVBQUU7WUFDTjtnQkFDRSxhQUFhLEVBQUUsQ0FBQztnQkFDaEIsdUJBQXVCLEVBQUUsUUFBUSxDQUMvQixjQUFjLENBQ1osdUJBQXVCLENBQ3JCLG9CQUFvQixDQUFDLHNCQUFzQixDQUFDLEVBQzVDLE1BQU0sQ0FDUCxDQUNGLENBQ0Y7Z0JBQ0QsY0FBYyxFQUFFLFVBQVU7Z0JBQzFCLGlCQUFpQjthQUNsQjtTQUNGO1FBQ0QsUUFBUSxFQUFFLENBQUM7UUFDWCxPQUFPLEVBQUUsQ0FBQyxFQUFFLGVBQWUsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDekQsT0FBTyxFQUFFLENBQUM7S0FDWCxDQUFDO0lBQ0YsT0FBTztRQUNMLFVBQVUsRUFBRSxDQUFDO1FBQ2IsWUFBWSxFQUFFLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0MsbUJBQW1CLEVBQUUsdUJBQXVCO0tBQzdDLENBQUM7QUFDSixDQUFDLENBQUMifQ==