import { isScriptNumberError, parseBytesAsScriptNumber } from './common';
import { applyError, AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
var Bits;
(function (Bits) {
    Bits[Bits["sequenceLocktimeDisableFlag"] = 31] = "sequenceLocktimeDisableFlag";
    Bits[Bits["sequenceLocktimeTypeFlag"] = 22] = "sequenceLocktimeTypeFlag";
})(Bits || (Bits = {}));
var Constants;
(function (Constants) {
    Constants[Constants["LocktimeScriptNumberByteLength"] = 5] = "LocktimeScriptNumberByteLength";
    Constants[Constants["LocktimeThreshold"] = 500000000] = "LocktimeThreshold";
    Constants[Constants["maximumSequenceNumber"] = 4294967295] = "maximumSequenceNumber";
    Constants[Constants["sequenceLocktimeTransactionVersionMinimum"] = 2] = "sequenceLocktimeTransactionVersionMinimum";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeDisableFlag"] = 2147483648] = "sequenceLocktimeDisableFlag";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeTypeFlag"] = 4194304] = "sequenceLocktimeTypeFlag";
    Constants[Constants["sequenceGranularity"] = 9] = "sequenceGranularity";
    Constants[Constants["sequenceLocktimeMask"] = 65535] = "sequenceLocktimeMask";
})(Constants || (Constants = {}));
export const readLocktime = (state, operation, flags) => {
    const item = state.stack[state.stack.length - 1];
    if (item === undefined) {
        return applyError(AuthenticationErrorCommon.emptyStack, state);
    }
    const parsedLocktime = parseBytesAsScriptNumber(item, flags.requireMinimalEncoding, Constants.LocktimeScriptNumberByteLength);
    if (isScriptNumberError(parsedLocktime)) {
        return applyError(AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    const locktime = Number(parsedLocktime);
    if (locktime < 0) {
        return applyError(AuthenticationErrorCommon.negativeLocktime, state);
    }
    return operation(state, locktime);
};
const locktimeTypesAreCompatible = (locktime, requiredLocktime) => (locktime < Constants.LocktimeThreshold &&
    requiredLocktime < Constants.LocktimeThreshold) ||
    (locktime >= Constants.LocktimeThreshold &&
        requiredLocktime >= Constants.LocktimeThreshold);
export const opCheckLockTimeVerify = (flags) => (state) => readLocktime(state, (nextState, requiredLocktime) => {
    if (!locktimeTypesAreCompatible(nextState.locktime, requiredLocktime)) {
        return applyError(AuthenticationErrorCommon.incompatibleLocktimeType, nextState);
    }
    if (requiredLocktime > nextState.locktime) {
        return applyError(AuthenticationErrorCommon.unsatisfiedLocktime, nextState);
    }
    if (nextState.sequenceNumber === Constants.maximumSequenceNumber) {
        return applyError(AuthenticationErrorCommon.locktimeDisabled, nextState);
    }
    return nextState;
}, flags);
// eslint-disable-next-line no-bitwise
const includesFlag = (value, flag) => (value & flag) !== 0;
export const opCheckSequenceVerify = (flags) => (state) => readLocktime(state, 
// eslint-disable-next-line complexity
(nextState, requiredSequence) => {
    const sequenceLocktimeDisabled = includesFlag(requiredSequence, Constants.sequenceLocktimeDisableFlag);
    if (sequenceLocktimeDisabled) {
        return nextState;
    }
    if (nextState.version < Constants.sequenceLocktimeTransactionVersionMinimum) {
        return applyError(AuthenticationErrorCommon.checkSequenceUnavailable, nextState);
    }
    if (includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeDisableFlag)) {
        return applyError(AuthenticationErrorCommon.unmatchedSequenceDisable, nextState);
    }
    if (includesFlag(requiredSequence, Constants.sequenceLocktimeTypeFlag) !==
        includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeTypeFlag)) {
        return applyError(AuthenticationErrorCommon.incompatibleSequenceType, nextState);
    }
    if (
    // eslint-disable-next-line no-bitwise
    (requiredSequence & Constants.sequenceLocktimeMask) >
        // eslint-disable-next-line no-bitwise
        (nextState.sequenceNumber & Constants.sequenceLocktimeMask)) {
        return applyError(AuthenticationErrorCommon.unsatisfiedSequenceNumber, nextState);
    }
    return nextState;
}, flags);
export const timeOperations = (flags) => ({
    [OpcodesCommon.OP_CHECKLOCKTIMEVERIFY]: opCheckLockTimeVerify(flags),
    [OpcodesCommon.OP_CHECKSEQUENCEVERIFY]: opCheckSequenceVerify(flags)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFMUMsSUFBSyxJQUdKO0FBSEQsV0FBSyxJQUFJO0lBQ1AsOEVBQWdDLENBQUE7SUFDaEMsd0VBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQUhJLElBQUksS0FBSixJQUFJLFFBR1I7QUFFRCxJQUFLLFNBV0o7QUFYRCxXQUFLLFNBQVM7SUFDWiw2RkFBa0MsQ0FBQTtJQUNsQywyRUFBK0IsQ0FBQTtJQUMvQixvRkFBa0MsQ0FBQTtJQUNsQyxtSEFBNkMsQ0FBQTtJQUM3QyxzQ0FBc0M7SUFDdEMsZ0dBQTJFLENBQUE7SUFDM0Usc0NBQXNDO0lBQ3RDLHVGQUE2RCxDQUFBO0lBQzdELHVFQUF1QixDQUFBO0lBQ3ZCLDZFQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFYSSxTQUFTLEtBQVQsU0FBUyxRQVdiO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBSTFCLEtBQVksRUFDWixTQUF3RCxFQUN4RCxLQUVDLEVBQ0QsRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUEyQixDQUFDO0lBQzNFLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUN0QixPQUFPLFVBQVUsQ0FDZix5QkFBeUIsQ0FBQyxVQUFVLEVBQ3BDLEtBQUssQ0FDTixDQUFDO0tBQ0g7SUFDRCxNQUFNLGNBQWMs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