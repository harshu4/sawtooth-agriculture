"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils/utils");
/**
 * Create an AuthenticationVirtualMachine to evaluate authentication programs
 * constructed from operations in the `instructionSet`.
 * @param instructionSet an `InstructionSet`
 */
exports.createAuthenticationVirtualMachine = (instructionSet) => {
    const availableOpcodes = 256;
    const operators = utils_1.range(availableOpcodes).map(codepoint => instructionSet.operations[codepoint] === undefined
        ? instructionSet.undefined
        : instructionSet.operations[codepoint]);
    const getCodepoint = (state) => state.instructions[state.ip];
    const after = (state) => {
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        state.ip += 1;
        return state;
    };
    const getOperation = (state) => operators[getCodepoint(state).opcode];
    const stateStepMutate = (state) => after(getOperation(state)(state));
    const stateContinue = instructionSet.continue;
    /**
     * When we get real tail call optimization, this can be replaced
     * with recursion.
     */
    const untilComplete = (state, stepFunction) => {
        // eslint-disable-next-line functional/no-loop-statement
        while (stateContinue(state)) {
            // eslint-disable-next-line functional/no-expression-statement, no-param-reassign
            state = stepFunction(state);
        }
        return state;
    };
    const clone = (state) => instructionSet.clone(state);
    const { verify } = instructionSet;
    const stateEvaluate = (state) => untilComplete(clone(state), stateStepMutate);
    const stateDebugStep = (state) => {
        const operator = getOperation(state);
        return after(operator(clone(state)));
    };
    const stateDebug = (state) => {
        const trace = [];
        // eslint-disable-next-line functional/no-expression-statement
        untilComplete(state, (currentState) => {
            const nextState = stateDebugStep(currentState);
            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
            trace.push(nextState);
            return nextState;
        });
        return trace;
    };
    const stateStep = (state) => stateStepMutate(clone(state));
    const evaluate = (program) => instructionSet.evaluate(program, stateEvaluate);
    const debug = (program) => {
        const results = [];
        const proxyDebug = (state) => {
            var _a;
            const debugResult = stateDebug(state);
            // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
            results.push(...debugResult);
            return (_a = debugResult[debugResult.length - 1], (_a !== null && _a !== void 0 ? _a : state));
        };
        const finalResult = instructionSet.evaluate(program, proxyDebug);
        return [...results, finalResult];
    };
    return {
        debug,
        evaluate,
        stateContinue,
        stateDebug,
        stateEvaluate,
        stateStep,
        stateStepMutate,
        verify
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1tYWNoaW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL3ZpcnR1YWwtbWFjaGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUF1QztBQXFMdkM7Ozs7R0FJRztBQUNVLFFBQUEsa0NBQWtDLEdBQUcsQ0FJaEQsY0FBbUUsRUFDQSxFQUFFO0lBQ3JFLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0lBQzdCLE1BQU0sU0FBUyxHQUFHLGFBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUN4RCxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFNBQVM7UUFDaEQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTO1FBQzFCLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUN6QyxDQUFDO0lBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUzRSxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtRQUNwQyx5RkFBeUY7UUFDekYsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDZCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBbUIsRUFBRSxFQUFFLENBQzNDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFeEMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUUsQ0FDOUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxR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