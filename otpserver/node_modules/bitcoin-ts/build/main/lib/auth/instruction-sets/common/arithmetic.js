"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combinators_1 = require("./combinators");
const flow_control_1 = require("./flow-control");
const opcodes_1 = require("./opcodes");
const types_1 = require("./types");
exports.op1Add = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value + BigInt(1))), flags.requireMinimalEncoding);
exports.op1Sub = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value - BigInt(1))), flags.requireMinimalEncoding);
exports.opNegate = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(-value)), flags.requireMinimalEncoding);
exports.opAbs = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(value < 0 ? -value : value)), flags.requireMinimalEncoding);
exports.opNot = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, value === BigInt(0)
    ? types_1.bigIntToScriptNumber(BigInt(1))
    : types_1.bigIntToScriptNumber(BigInt(0))), flags.requireMinimalEncoding);
exports.op0NotEqual = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, value) => combinators_1.pushToStack(nextState, value === BigInt(0)
    ? types_1.bigIntToScriptNumber(BigInt(0))
    : types_1.bigIntToScriptNumber(BigInt(1))), flags.requireMinimalEncoding);
exports.opAdd = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue + secondValue)), flags.requireMinimalEncoding);
exports.opSub = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue - secondValue)), flags.requireMinimalEncoding);
exports.opBoolAnd = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== BigInt(0) && secondValue !== BigInt(0))), flags.requireMinimalEncoding);
exports.opBoolOr = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== BigInt(0) || secondValue !== BigInt(0))), flags.requireMinimalEncoding);
exports.opNumEqual = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue === secondValue)), flags.requireMinimalEncoding);
exports.opNumEqualVerify = (flags) => combinators_1.combineOperations(exports.opNumEqual(flags), flow_control_1.opVerify());
exports.opNumNotEqual = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue !== secondValue)), flags.requireMinimalEncoding);
exports.opLessThan = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue < secondValue)), flags.requireMinimalEncoding);
exports.opLessThanOrEqual = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue <= secondValue)), flags.requireMinimalEncoding);
exports.opGreaterThan = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue > secondValue)), flags.requireMinimalEncoding);
exports.opGreaterThanOrEqual = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(firstValue >= secondValue)), flags.requireMinimalEncoding);
exports.opMin = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue < secondValue ? firstValue : secondValue)), flags.requireMinimalEncoding);
exports.opMax = (flags) => (state) => combinators_1.useTwoScriptNumbers(state, (nextState, firstValue, secondValue) => combinators_1.pushToStack(nextState, types_1.bigIntToScriptNumber(firstValue > secondValue ? firstValue : secondValue)), flags.requireMinimalEncoding);
exports.opWithin = (flags) => (state) => combinators_1.useThreeScriptNumbers(state, (nextState, firstValue, secondValue, thirdValue) => combinators_1.pushToStack(nextState, types_1.booleanToScriptNumber(secondValue <= firstValue && firstValue < thirdValue)), flags.requireMinimalEncoding);
exports.arithmeticOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_1ADD]: exports.op1Add(flags),
    [opcodes_1.OpcodesCommon.OP_1SUB]: exports.op1Sub(flags),
    [opcodes_1.OpcodesCommon.OP_NEGATE]: exports.opNegate(flags),
    [opcodes_1.OpcodesCommon.OP_ABS]: exports.opAbs(flags),
    [opcodes_1.OpcodesCommon.OP_NOT]: exports.opNot(flags),
    [opcodes_1.OpcodesCommon.OP_0NOTEQUAL]: exports.op0NotEqual(flags),
    [opcodes_1.OpcodesCommon.OP_ADD]: exports.opAdd(flags),
    [opcodes_1.OpcodesCommon.OP_SUB]: exports.opSub(flags),
    [opcodes_1.OpcodesCommon.OP_BOOLAND]: exports.opBoolAnd(flags),
    [opcodes_1.OpcodesCommon.OP_BOOLOR]: exports.opBoolOr(flags),
    [opcodes_1.OpcodesCommon.OP_NUMEQUAL]: exports.opNumEqual(flags),
    [opcodes_1.OpcodesCommon.OP_NUMEQUALVERIFY]: exports.opNumEqualVerify(flags),
    [opcodes_1.OpcodesCommon.OP_NUMNOTEQUAL]: exports.opNumNotEqual(flags),
    [opcodes_1.OpcodesCommon.OP_LESSTHAN]: exports.opLessThan(flags),
    [opcodes_1.OpcodesCommon.OP_LESSTHANOREQUAL]: exports.opLessThanOrEqual(flags),
    [opcodes_1.OpcodesCommon.OP_GREATERTHAN]: exports.opGreaterThan(flags),
    [opcodes_1.OpcodesCommon.OP_GREATERTHANOREQUAL]: exports.opGreaterThanOrEqual(flags),
    [opcodes_1.OpcodesCommon.OP_MIN]: exports.opMin(flags),
    [opcodes_1.OpcodesCommon.OP_MAX]: exports.opMax(flags),
    [opcodes_1.OpcodesCommon.OP_WITHIN]: exports.opWithin(flags)
});
//# sourceMappingURL=data:application/json;base64,