"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hex_1 = require("../../../utils/hex");
const instruction_sets_utils_1 = require("../instruction-sets-utils");
const combinators_1 = require("./combinators");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
const types_1 = require("./types");
var PushOperationConstants;
(function (PushOperationConstants) {
    PushOperationConstants[PushOperationConstants["OP_0"] = 0] = "OP_0";
    /**
     * OP_PUSHBYTES_75
     */
    PushOperationConstants[PushOperationConstants["maximumPushByteOperationSize"] = 75] = "maximumPushByteOperationSize";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_1"] = 76] = "OP_PUSHDATA_1";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_2"] = 77] = "OP_PUSHDATA_2";
    PushOperationConstants[PushOperationConstants["OP_PUSHDATA_4"] = 78] = "OP_PUSHDATA_4";
    /**
     * OP_PUSHDATA_4
     */
    PushOperationConstants[PushOperationConstants["highestPushDataOpcode"] = 78] = "highestPushDataOpcode";
    /**
     * For OP_1 to OP_16, `opcode` is the number offset by `0x50` (80):
     *
     * `OP_N = 0x50 + N`
     *
     * OP_0 is really OP_PUSHBYTES_0 (`0x00`), so it does not follow this pattern.
     */
    PushOperationConstants[PushOperationConstants["pushNumberOpcodesOffset"] = 80] = "pushNumberOpcodesOffset";
    /** OP_1 through OP_16 */
    PushOperationConstants[PushOperationConstants["pushNumberOpcodes"] = 16] = "pushNumberOpcodes";
    PushOperationConstants[PushOperationConstants["negativeOne"] = 129] = "negativeOne";
    PushOperationConstants[PushOperationConstants["OP_1NEGATE"] = 79] = "OP_1NEGATE";
    /**
     * 256 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData1Size"] = 255] = "maximumPushData1Size";
    /**
     * Standard consensus parameter for most Bitcoin forks.
     */
    PushOperationConstants[PushOperationConstants["maximumPushSize"] = 520] = "maximumPushSize";
    /**
     * 256 ** 2 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData2Size"] = 65535] = "maximumPushData2Size";
    /**
     * 256 ** 4 - 1
     */
    PushOperationConstants[PushOperationConstants["maximumPushData4Size"] = 4294967295] = "maximumPushData4Size";
})(PushOperationConstants = exports.PushOperationConstants || (exports.PushOperationConstants = {}));
var Bytes;
(function (Bytes) {
    Bytes[Bytes["Uint8"] = 1] = "Uint8";
    Bytes[Bytes["Uint16"] = 2] = "Uint16";
    Bytes[Bytes["Uint32"] = 4] = "Uint32";
})(Bytes || (Bytes = {}));
/**
 * Returns the minimal bytecode required to push the provided `data` to the
 * stack.
 *
 * @remarks
 * This method conservatively encodes a `Uint8Array` as a data push. For Script
 * Numbers which can be pushed using a single opcode (-1 through 16), the
 * equivalent bytecode value is returned. Other `data` values will be prefixed
 * with the proper opcode and push length bytes (if necessary) to create the
 * minimal push instruction.
 *
 * Note, while some single-byte Script Number pushes will be minimally-encoded
 * by this method, all larger inputs will be encoded as-is (it cannot be assumed
 * that inputs are intended to be used as Script Numbers). To encode the push of
 * a Script Number, minimally-encode the number before passing it to this
 * method, e.g.:
 * `encodeDataPush(bigIntToScriptNumber(parseBytesAsScriptNumber(nonMinimalNumber)))`.
 *
 * The maximum `bytecode` length which can be encoded for a push in the Bitcoin
 * system is `4294967295` (~4GB). This method assumes a smaller input â€“ if
 * `bytecode` has the potential to be longer, it should be checked (and the
 * error handled) prior to calling this method.
 *
 * @param data the Uint8Array to push to the stack
 */
// eslint-disable-next-line complexity
exports.encodeDataPush = (data) => data.length <= PushOperationConstants.maximumPushByteOperationSize
    ? data.length === 0
        ? Uint8Array.of(0)
        : data.length === 1
            ? data[0] !== 0 && data[0] <= PushOperationConstants.pushNumberOpcodes
                ? Uint8Array.of(data[0] + PushOperationConstants.pushNumberOpcodesOffset)
                : data[0] === PushOperationConstants.negativeOne
                    ? Uint8Array.of(PushOperationConstants.OP_1NEGATE)
                    : Uint8Array.from([1, ...data])
            : Uint8Array.from([data.length, ...data])
    : data.length <= PushOperationConstants.maximumPushData1Size
        ? Uint8Array.from([
            PushOperationConstants.OP_PUSHDATA_1,
            ...instruction_sets_utils_1.numberToLittleEndianBin(data.length, Bytes.Uint8),
            ...data
        ])
        : data.length <= PushOperationConstants.maximumPushData2Size
            ? Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_2,
                ...instruction_sets_utils_1.numberToLittleEndianBin(data.length, Bytes.Uint16),
                ...data
            ])
            : Uint8Array.from([
                PushOperationConstants.OP_PUSHDATA_4,
                ...instruction_sets_utils_1.numberToLittleEndianBin(data.length, Bytes.Uint32),
                ...data
            ]);
/**
 * Returns true if the provided `data` is minimally-encoded by the provided
 * `opcode`.
 * @param opcode the opcode used to push `data`
 * @param data the contents of the push
 */
// eslint-disable-next-line complexity
exports.isMinimalDataPush = (opcode, data) => data.length === 0
    ? opcode === PushOperationConstants.OP_0
    : data.length === 1
        ? data[0] >= 1 && data[0] <= PushOperationConstants.pushNumberOpcodes
            ? opcode === data[0] + PushOperationConstants.pushNumberOpcodesOffset
            : data[0] === PushOperationConstants.negativeOne
                ? opcode === PushOperationConstants.OP_1NEGATE
                : true
        : data.length <= PushOperationConstants.maximumPushByteOperationSize
            ? opcode === data.length
            : data.length <= PushOperationConstants.maximumPushData1Size
                ? opcode === PushOperationConstants.OP_PUSHDATA_1
                : data.length <= PushOperationConstants.maximumPushData2Size
                    ? opcode === PushOperationConstants.OP_PUSHDATA_2
                    : true;
exports.pushByteOpcodes = [
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_1,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_2,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_3,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_4,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_5,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_6,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_7,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_8,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_9,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_10,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_11,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_12,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_13,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_14,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_15,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_16,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_17,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_18,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_19,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_20,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_21,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_22,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_23,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_24,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_25,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_26,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_27,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_28,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_29,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_30,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_31,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_32,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_33,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_34,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_35,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_36,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_37,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_38,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_39,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_40,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_41,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_42,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_43,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_44,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_45,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_46,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_47,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_48,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_49,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_50,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_51,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_52,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_53,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_54,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_55,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_56,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_57,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_58,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_59,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_60,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_61,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_62,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_63,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_64,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_65,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_66,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_67,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_68,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_69,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_70,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_71,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_72,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_73,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_74,
    opcodes_1.OpcodesCommon.OP_PUSHBYTES_75
];
const executionIsActive = (state) => state.executionStack.every(item => item);
exports.pushOperation = (flags, maximumPushSize = PushOperationConstants.maximumPushSize) => (state) => {
    const instruction = state.instructions[state.ip];
    return instruction.data.length > maximumPushSize
        ? errors_1.applyError(errors_1.AuthenticationErrorCommon.exceedsMaximumPush, state)
        : executionIsActive(state)
            ? flags.requireMinimalEncoding &&
                !exports.isMinimalDataPush(instruction.opcode, instruction.data)
                ? errors_1.applyError(errors_1.AuthenticationErrorCommon.nonMinimalPush, state)
                : combinators_1.pushToStack(state, instruction.data)
            : state;
};
exports.pushOperations = (flags, maximumPushSize = PushOperationConstants.maximumPushSize) => {
    const push = exports.pushOperation(flags, maximumPushSize);
    return hex_1.range(PushOperationConstants.highestPushDataOpcode + 1).reduce((group, i) => (Object.assign(Object.assign({}, group), { [i]: push })), {});
};
exports.pushNumberOpcodes = [
    opcodes_1.OpcodesCommon.OP_1NEGATE,
    opcodes_1.OpcodesCommon.OP_1,
    opcodes_1.OpcodesCommon.OP_2,
    opcodes_1.OpcodesCommon.OP_3,
    opcodes_1.OpcodesCommon.OP_4,
    opcodes_1.OpcodesCommon.OP_5,
    opcodes_1.OpcodesCommon.OP_6,
    opcodes_1.OpcodesCommon.OP_7,
    opcodes_1.OpcodesCommon.OP_8,
    opcodes_1.OpcodesCommon.OP_9,
    opcodes_1.OpcodesCommon.OP_10,
    opcodes_1.OpcodesCommon.OP_11,
    opcodes_1.OpcodesCommon.OP_12,
    opcodes_1.OpcodesCommon.OP_13,
    opcodes_1.OpcodesCommon.OP_14,
    opcodes_1.OpcodesCommon.OP_15,
    opcodes_1.OpcodesCommon.OP_16
];
const op1NegateValue = -1;
exports.pushNumberOperations = () => exports.pushNumberOpcodes
    .map((opcode, i) => [
    opcode,
    [op1NegateValue, ...hex_1.range(PushOperationConstants.pushNumberOpcodes, 1)]
        .map(BigInt)
        .map(types_1.bigIntToScriptNumber)[i]
])
    .reduce((group, pair) => (Object.assign(Object.assign({}, group), { [pair[0]]: (state) => combinators_1.pushToStack(state, pair[1].slice()) })), {});
//# sourceMappingURL=data:application/json;base64,