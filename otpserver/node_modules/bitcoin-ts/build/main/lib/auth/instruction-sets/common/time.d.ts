import { AuthenticationProgramStateCommon, ErrorState, StackState } from '../../state';
import { AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export declare const readLocktime: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>(state: State, operation: (nextState: State, locktime: number) => State, flags: {
    requireMinimalEncoding: boolean;
}) => State;
export declare const opCheckLockTimeVerify: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon> & {
    readonly locktime: number;
    readonly sequenceNumber: number;
}, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opCheckSequenceVerify: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon> & {
    readonly sequenceNumber: number;
    readonly version: number;
}, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const timeOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    [OpcodesCommon.OP_CHECKLOCKTIMEVERIFY]: (state: State) => State;
    [OpcodesCommon.OP_CHECKSEQUENCEVERIFY]: (state: State) => State;
};
//# sourceMappingURL=time.d.ts.map