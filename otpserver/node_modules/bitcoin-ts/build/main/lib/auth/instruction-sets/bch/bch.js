"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("../../../crypto/crypto");
const virtual_machine_1 = require("../../virtual-machine");
const bch_instruction_sets_1 = require("./bch-instruction-sets");
__export(require("./bch-descriptions"));
__export(require("./bch-errors"));
__export(require("./bch-instruction-sets"));
__export(require("./bch-opcodes"));
__export(require("./bch-operations"));
__export(require("./bch-types"));
__export(require("./fixtures/bitcoin-abc/bitcoin-abc-utils"));
/**
 * Initialize a virtual machine using the provided BCH instruction set.
 *
 * @param instructionSet the VM version to instantiate â€“ by default, the current
 * "strict" VM is used (`instructionSetBCHCurrentStrict`)
 */
exports.instantiateVirtualMachineBCH = async (instructionSet = bch_instruction_sets_1.instructionSetBCHCurrentStrict) => {
    const [sha1, sha256, ripemd160, secp256k1] = await Promise.all([
        crypto_1.instantiateSha1(),
        crypto_1.instantiateSha256(),
        crypto_1.instantiateRipemd160(),
        crypto_1.instantiateSecp256k1()
    ]);
    return virtual_machine_1.createAuthenticationVirtualMachine(bch_instruction_sets_1.createInstructionSetBCH(bch_instruction_sets_1.getFlagsForInstructionSetBCH(instructionSet), sha1, sha256, ripemd160, secp256k1));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvYmNoL2JjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1EQUtnQztBQUNoQywyREFBMkU7QUFFM0UsaUVBSWdDO0FBRWhDLHdDQUFtQztBQUNuQyxrQ0FBNkI7QUFDN0IsNENBQXVDO0FBQ3ZDLG1DQUE4QjtBQUM5QixzQ0FBaUM7QUFDakMsaUNBQTRCO0FBQzVCLDhEQUF5RDtBQUV6RDs7Ozs7R0FLRztBQUNVLFFBQUEsNEJBQTRCLEdBQUcsS0FBSyxFQUMvQyxjQUFjLEdBQUcscURBQThCLEVBQy9DLEVBQUU7SUFDRixNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzdELHdCQUFlLEVBQUU7UUFDakIsMEJBQWlCLEVBQUU7UUFDbkIsNkJBQW9CLEVBQUU7UUFDdEIsNkJBQW9CLEVBQUU7S0FDdkIsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxvREFBa0MsQ0FDdkMsOENBQXVCLENBQ3JCLG1EQUE0QixDQUFDLGNBQWMsQ0FBQyxFQUM1QyxJQUFJLEVBQ0osTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLENBQ1YsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=