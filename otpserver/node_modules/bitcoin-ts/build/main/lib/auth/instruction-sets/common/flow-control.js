"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const arithmetic_1 = require("./arithmetic");
const combinators_1 = require("./combinators");
const common_1 = require("./common");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
exports.opVerify = () => (state) => combinators_1.useOneStackItem(state, (nextState, item) => common_1.stackItemIsTruthy(item)
    ? nextState
    : errors_1.applyError(errors_1.AuthenticationErrorCommon.failedVerify, nextState));
exports.reservedOperation = () => (state) => errors_1.applyError(errors_1.AuthenticationErrorCommon.calledReserved, state);
exports.opReturn = () => (state) => errors_1.applyError(errors_1.AuthenticationErrorCommon.calledReturn, state);
exports.conditionalFlowControlOperations = () => ({
    [opcodes_1.OpcodesCommon.OP_RESERVED]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VER]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VERIFY]: exports.opVerify(),
    [opcodes_1.OpcodesCommon.OP_RETURN]: exports.opReturn(),
    [opcodes_1.OpcodesCommon.OP_RESERVED1]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_RESERVED2]: exports.reservedOperation()
});
exports.opIf = () => (state) => {
    if (state.executionStack.every(item => item)) {
        // eslint-disable-next-line functional/immutable-data
        const element = state.stack.pop();
        if (element === undefined) {
            return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
        }
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        state.executionStack.push(common_1.stackItemIsTruthy(element));
        return state;
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack.push(false);
    return state;
};
exports.opNotIf = (flags) => {
    const not = combinators_1.conditionallyEvaluate(arithmetic_1.opNot(flags));
    const ifOp = exports.opIf();
    return (state) => ifOp(not(state));
};
exports.opEndIf = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const element = state.executionStack.pop();
    if (element === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unexpectedEndIf, state);
    }
    return state;
};
exports.opElse = () => (state) => {
    const top = state.executionStack[state.executionStack.length - 1];
    if (top === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unexpectedElse, state);
    }
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.executionStack[state.executionStack.length - 1] = !top;
    return state;
};
exports.unconditionalFlowControlOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_IF]: exports.opIf(),
    [opcodes_1.OpcodesCommon.OP_NOTIF]: exports.opNotIf(flags),
    [opcodes_1.OpcodesCommon.OP_VERIF]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_VERNOTIF]: exports.reservedOperation(),
    [opcodes_1.OpcodesCommon.OP_ELSE]: exports.opElse(),
    [opcodes_1.OpcodesCommon.OP_ENDIF]: exports.opEndIf()
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1jb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hdXRoL2luc3RydWN0aW9uLXNldHMvY29tbW9uL2Zsb3ctY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVFBLDZDQUFxQztBQUNyQywrQ0FBdUU7QUFDdkUscUNBQTZDO0FBQzdDLHFDQUFpRTtBQUNqRSx1Q0FBMEM7QUFFN0IsUUFBQSxRQUFRLEdBQUcsR0FHRixFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN4Qyw2QkFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUN6QywwQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQyxDQUFDLFNBQVM7SUFDWCxDQUFDLENBQUMsbUJBQVUsQ0FDUixrQ0FBeUIsQ0FBQyxZQUFZLEVBQ3RDLFNBQVMsQ0FDVixDQUNOLENBQUM7QUFFUyxRQUFBLGlCQUFpQixHQUFHLEdBRzdCLEVBQUUsQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQ3RCLG1CQUFVLENBQWdCLGtDQUF5QixDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUVoRSxRQUFBLFFBQVEsR0FBRyxHQUE2QyxFQUFFLENBQUMsQ0FDdEUsS0FBWSxFQUNaLEVBQUUsQ0FBQyxtQkFBVSxDQUFnQixrQ0FBeUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFakUsUUFBQSxnQ0FBZ0MsR0FBRyxHQUk1QyxFQUFFLENBQUMsQ0FBQztJQUNOLENBQUMsdUJBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSx5QkFBaUIsRUFBaUI7SUFDL0QsQ0FBQyx1QkFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLHlCQUFpQixFQUFpQjtJQUMxRCxDQUFDLHVCQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsZ0JBQVEsRUFBaUI7SUFDcEQsQ0FBQyx1QkFBYSxDQUFDLFNB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