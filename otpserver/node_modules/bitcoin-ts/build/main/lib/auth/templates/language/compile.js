"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const parse_1 = require("./parse");
const reduce_1 = require("./reduce");
const resolve_1 = require("./resolve");
var Formatting;
(function (Formatting) {
    Formatting[Formatting["requiresCommas"] = 3] = "requiresCommas";
    Formatting[Formatting["requiresOr"] = 2] = "requiresOr";
})(Formatting || (Formatting = {}));
/**
 * The constant used by the parser to denote the end of the input
 */
const EOF = 'EOF';
/**
 * A text-formatting method to pretty-print the list of expected inputs
 * (`Encountered unexpected input while parsing script. Expected ...`). If
 * present, the `EOF` expectation is always moved to the end of the list.
 * @param expectedArray the alphabetized list of expected inputs produced by
 * `parseScript`
 */
const describeExpectedInput = (expectedArray) => {
    const newArray = expectedArray.filter(value => value !== EOF);
    // eslint-disable-next-line functional/no-conditional-statement
    if (newArray.length !== expectedArray.length) {
        // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
        newArray.push('the end of the script');
    }
    const withoutLastElement = newArray.slice(0, newArray.length - 1);
    const lastElement = newArray[newArray.length - 1];
    return `Encountered unexpected input while parsing script. Expected ${newArray.length >= Formatting.requiresCommas
        ? withoutLastElement.join(', ').concat(`, or ${lastElement}`)
        : newArray.length === Formatting.requiresOr
            ? newArray.join(' or ')
            : lastElement}.`;
};
/**
 * Note, `compileScript` is the recommended API for using this method.
 */
exports.compileScriptText = (script, data, environment, scriptId) => {
    const parseResult = parse_1.parseScript(script);
    if (!parseResult.status) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: describeExpectedInput(parseResult.expected),
                    range: {
                        endColumn: parseResult.index.column,
                        endLineNumber: parseResult.index.line,
                        startColumn: parseResult.index.column,
                        startLineNumber: parseResult.index.line
                    }
                }
            ],
            success: false
        };
    }
    const resolver = resolve_1.createIdentifierResolver(scriptId, data, environment);
    const resolvedScript = resolve_1.resolveScriptSegment(parseResult.value, resolver);
    const resolutionErrors = errors_1.getResolutionErrors(resolvedScript);
    if (resolutionErrors.length !== 0) {
        return {
            errorType: 'resolve',
            errors: resolutionErrors,
            parse: parseResult.value,
            resolve: resolvedScript,
            success: false
        };
    }
    const reduction = reduce_1.reduceScript(resolvedScript, environment.vm, environment.createState);
    return Object.assign(Object.assign({}, (reduction.errors === undefined
        ? { bytecode: reduction.bytecode, success: true }
        : { errorType: 'reduce', errors: reduction.errors, success: false })), { parse: parseResult.value, reduce: reduction, resolve: resolvedScript });
};
/**
 * Parse, resolve, and reduce the provided BTL script using the provided`data`
 * and `environment`.
 */
exports.compileScript = (scriptId, data, environment) => {
    const script = environment.scripts[scriptId];
    if (script === undefined) {
        return {
            errorType: 'parse',
            errors: [
                {
                    error: `No script with an ID of '${scriptId}' was provided in the compilation environment.`,
                    range: {
                        endColumn: 0,
                        endLineNumber: 0,
                        startColumn: 0,
                        startLineNumber: 0
                    }
                }
            ],
            success: false
        };
    }
    return exports.compileScriptText(script, data, environment, scriptId);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC90ZW1wbGF0ZXMvbGFuZ3VhZ2UvY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFDQUErQztBQUMvQyxtQ0FBd0Q7QUFDeEQscUNBQTJFO0FBQzNFLHVDQU9tQjtBQTREbkIsSUFBSyxVQUdKO0FBSEQsV0FBSyxVQUFVO0lBQ2IsK0RBQWtCLENBQUE7SUFDbEIsdURBQWMsQ0FBQTtBQUNoQixDQUFDLEVBSEksVUFBVSxLQUFWLFVBQVUsUUFHZDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2xCOzs7Ozs7R0FNRztBQUNILE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxhQUF1QixFQUFFLEVBQUU7SUFDeEQsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssS0FBSyxHQUFHLENBQUMsQ0FBQztJQUM5RCwrREFBK0Q7SUFDL0QsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLGFBQWEsQ0FBQyxNQUFNLEVBQUU7UUFDNUMseUZBQXlGO1FBQ3pGLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUN4QztJQUNELE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRCxPQUFPLCtEQUNMLFFBQVEsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLGNBQWM7UUFDMUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxXQUFXLEVBQUUsQ0FBQztRQUM3RCxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsVUFBVTtZQUMzQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdkIsQ0FBQyxDQUFDLFdBQ04sR0FBRyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDVSxRQUFBLGlCQUFpQixHQUFHLENBSS9CLE1BQWMsRUFDZCxJQUE0QyxFQUM1QyxXQUEwRCxFQUMxRCxRQUFpQixFQUNnQixFQUFFO0lBQ25DLE1BQU0sV0FBVyxHQUFHLG1CQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7UUFDdkIsT0FBTztZQUNMLFNBQVMsRUFBRSxPQUFPO1lBQ2xCLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxLQUFLLEVBQUUscUJBQXFCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztvQkFDbEQsS0FBSyxFQUFFO3dCQUNMLFNBQVMsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU07d0JBQ25DLGFBQWEsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUk7d0JBQ3JDLFdBQVcsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU07d0JBQ3JDLGVBQWUsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUk7cUJBQ3hDO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7S0FDSDtJQUNELE1BQU0sUUFBUSxHQUFHLGtDQUF3QixDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkUsTUFBTSxjQUFjLEdBQUcsOEJBQW9CLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RSxNQUFNLGdCQUFnQixHQUFHLDRCQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdELElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNqQyxPQUFPO1lBQ0wsU0FBUyxFQUFFLFNBQVM7WUFDcEIsTUFBTSxFQUFFLGdCQUFnQjtZQUN4QixLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7WUFDeEIsT0FBTyxFQUFFLGNBQWM7WUFDdkIsT0FBTyxFQUFFLEtBQUs7U0FDZixDQUFDO0tBQ0g7SUFDRCxNQUFNLFNBQVMsR0FBRyxxQkFBWSxDQUM1QixjQUFjLEVBQ2QsV0FBVyxDQUFDLEVBQUUsRUFDZCxXQUFXLENBQUMsV0FBVyxDQUN4QixDQUFDO0lBQ0YsdUNBQ0ssQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLFNBQVM7UUFDaEMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtRQUNqRCxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUN0RSxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFDeEIsTUFBTSxFQUFFLFNBQVMsRUFDakIsT0FBTyxFQUFFLGNBQWMsSUFDdkI7QUFDSixDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxDQUkzQixRQUFnQixFQUNoQixJQUE0QyxFQUM1QyxXQUEwRCxFQUN6QixFQUFFO0lBQ25DLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUF1QixDQUFDO0lBQ25FLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixPQUFPO1lBQ0wsU0FBUyxFQUFFLE9BQU87WUFDbEIsTUFBTSxFQUFFO2dCQUNOO29CQUNFLEtBQUssRUFBRSw0QkFBNEIsUUFBUSxnREFBZ0Q7b0JBQzNGLEtBQUssRUFBRTt3QkFDTCxTQUFTLEVBQUUsQ0FBQzt3QkFDWixhQUFhLEVBQUUsQ0FBQzt3QkFDaEIsV0FBVyxFQUFFLENBQUM7d0JBQ2QsZUFBZSxFQUFFLENBQUM7cUJBQ25CO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7S0FDSDtJQUNELE9BQU8seUJBQWlCLENBQ3RCLE1BQU0sRUFDTixJQUFJLEVBQ0osV0FBVyxFQUNYLFFBQVEsQ0FDVCxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=