import { MinimumProgramState, StackState } from '../../state';
import { BtlScriptSegment } from './parse';
import { ScriptReductionTraceContainerNode } from './reduce';
import { CompilationData, CompilationEnvironment, Range, ResolvedScript } from './resolve';
export interface CompilationResultResolve {
    parse: BtlScriptSegment;
    resolve: ResolvedScript;
}
export interface CompilationResultReduce<ProgramState> extends CompilationResultResolve {
    reduce: ScriptReductionTraceContainerNode<ProgramState>;
}
export interface CompilationResultErrorBase {
    errors: CompilationError[];
    errorType: string;
    success: false;
}
export interface CompilationError {
    error: string;
    range: Range;
}
export interface CompilationResultParseError extends CompilationResultErrorBase {
    /**
     * The `parse` stage produces only a single parse error at a time.
     */
    errors: [CompilationError];
    errorType: 'parse';
}
export interface CompilationResultResolveError extends CompilationResultResolve, CompilationResultErrorBase {
    errorType: 'resolve';
}
export interface CompilationResultReduceError<ProgramState> extends CompilationResultReduce<ProgramState>, CompilationResultErrorBase {
    errorType: 'reduce';
}
export declare type CompilationResultError<ProgramState> = CompilationResultParseError | CompilationResultResolveError | CompilationResultReduceError<ProgramState>;
export interface CompilationResultSuccess<ProgramState> extends CompilationResultReduce<ProgramState> {
    bytecode: Uint8Array;
    success: true;
}
export declare type CompilationResult<ProgramState = StackState & MinimumProgramState> = CompilationResultSuccess<ProgramState> | CompilationResultError<ProgramState>;
/**
 * Note, `compileScript` is the recommended API for using this method.
 */
export declare const compileScriptText: <ProgramState = StackState<Uint8Array> & MinimumProgramState<number>, CompilerOperationData = {}>(script: string, data: CompilationData<CompilerOperationData>, environment: CompilationEnvironment<CompilerOperationData, import("./resolve").CompilerOperationsMinimal>, scriptId?: string | undefined) => CompilationResult<ProgramState>;
/**
 * Parse, resolve, and reduce the provided BTL script using the provided`data`
 * and `environment`.
 */
export declare const compileScript: <ProgramState = StackState<Uint8Array> & MinimumProgramState<number>, CompilerOperationData = {}>(scriptId: string, data: CompilationData<CompilerOperationData>, environment: CompilationEnvironment<CompilerOperationData, import("./resolve").CompilerOperationsMinimal>) => CompilationResult<ProgramState>;
//# sourceMappingURL=compile.d.ts.map