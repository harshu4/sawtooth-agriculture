export interface SourcePosition {
    column: number;
    line: number;
    offset: number;
}
export interface MarkedNode {
    end: SourcePosition;
    start: SourcePosition;
}
declare type StringSegmentType = 'Comment' | 'Identifier' | 'UTF8Literal' | 'HexLiteral';
declare type RecursiveSegmentType = 'Push' | 'Evaluation';
interface BitauthTemplatingLanguageSegment extends MarkedNode {
    name: string;
}
interface BtlStringSegment extends BitauthTemplatingLanguageSegment {
    name: StringSegmentType;
    value: string;
}
interface BtlBigIntSegment extends BitauthTemplatingLanguageSegment {
    name: 'BigIntLiteral';
    value: bigint;
}
interface BtlRecursiveSegment extends BitauthTemplatingLanguageSegment {
    name: RecursiveSegmentType;
    value: BtlScriptSegment;
}
export interface BtlScriptSegment extends BitauthTemplatingLanguageSegment {
    name: 'Script';
    value: (BtlRecursiveSegment | BtlBigIntSegment | BtlStringSegment)[];
}
export declare type ParseResult = {
    expected: string[];
    index: SourcePosition;
    status: false;
} | {
    status: true;
    value: BtlScriptSegment;
};
export declare const parseScript: (script: string) => ParseResult;
export {};
//# sourceMappingURL=parse.d.ts.map