"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hex_1 = require("./hex");
const defaultStringifySpacing = 2;
/**
 * A safe method to `JSON.stringify` a value, useful for debugging and logging
 * purposes.
 *
 * @remarks
 * Without modifications, `JSON.stringify` has several shortcomings in
 * debugging and logging usage:
 * - throws when serializing anything containing a `bigint`
 * - `Uint8Array`s are often serialized in base 10 with newlines between each
 *   index item
 * - `functions` and `symbols` are not clearly marked
 *
 * This method is more helpful in these cases:
 * - `bigint`: `0n` => `<bigint: 0n>`
 * - `Uint8Array`: `Uint8Array.of(0,0)` => `<Uint8Array: 0x0000>`
 * - `function`: `(x) => x * 2` => `<function: (x) => x * 2>`
 * - `symbol`: `Symbol(A)` => `<symbol: Symbol(A)>`
 *
 * @param value the data to serialize
 * @param spacing the number of spaces to use in
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.stringify = (value, spacing = defaultStringifySpacing) => JSON.stringify(value, 
// eslint-disable-next-line complexity
(_, item) => {
    var _a;
    const type = typeof item;
    const name = type === 'object' ? (_a = item.constructor) === null || _a === void 0 ? void 0 : _a.name : type;
    switch (name) {
        case 'Uint8Array':
            return `<Uint8Array: 0x${hex_1.binToHex(item)}>`;
        case 'bigint':
            return `<bigint: ${item.toString()}n>`;
        case 'function':
        case 'symbol':
            return `<${name}: ${item.toString()}>`;
        default:
            return item;
    }
}, spacing);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy9sb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBaUM7QUFFakMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUM7QUFFbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0gsOERBQThEO0FBQ2pELFFBQUEsU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFFLE9BQU8sR0FBRyx1QkFBdUIsRUFBRSxFQUFFLENBQ3pFLElBQUksQ0FBQyxTQUFTLENBQ1osS0FBSztBQUNMLHNDQUFzQztBQUN0QyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTs7SUFDVixNQUFNLElBQUksR0FBRyxPQUFPLElBQUksQ0FBQztJQUN6QixNQUFNLElBQUksR0FDUixJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBRSxNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLElBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2hFLFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxZQUFZO1lBQ2YsT0FBTyxrQkFBa0IsY0FBUSxDQUFDLElBQWtCLENBQUMsR0FBRyxDQUFDO1FBQzNELEtBQUssUUFBUTtZQUNYLE9BQU8sWUFBYSxJQUFlLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQztRQUNyRCxLQUFLLFVBQVUsQ0FBQztRQUNoQixLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUksSUFBSSxLQUFNLElBQTBCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUVoRTtZQUNFLE9BQU8sSUFBSSxDQUFDO0tBQ2Y7QUFDSCxDQUFDLEVBQ0QsT0FBTyxDQUNSLENBQUMifQ==