import { AlternateStackState, AuthenticationProgramCommon, AuthenticationProgramExternalStateCommon, AuthenticationProgramInternalStateCommon, AuthenticationProgramStateCommon, ErrorState, ExecutionStackState, StackState } from '../../state';
import { Operation } from '../../virtual-machine';
import { AuthenticationInstruction } from '../instruction-sets-types';
import { Ripemd160, Secp256k1, Sha1, Sha256 } from './crypto';
import { AuthenticationErrorCommon } from './errors';
export * from './arithmetic';
export * from './bitwise';
export * from './combinators';
export * from './crypto';
export * from './descriptions';
export * from './encoding';
export * from './errors';
export * from './flow-control';
export * from './nop';
export * from './opcodes';
export * from './push';
export * from './signing-serialization';
export * from './splice';
export * from './stack';
export * from './time';
export * from './types';
export declare enum ConsensusCommon {
    /**
     * A.K.A. `MAX_SCRIPT_ELEMENT_SIZE`
     */
    maximumStackItemLength = 520,
    maximumScriptNumberLength = 4,
    /**
     * A.K.A. `MAX_OPS_PER_SCRIPT`
     */
    maximumOperationCount = 201,
    /**
     * A.K.A. `MAX_SCRIPT_SIZE`
     */
    maximumBytecodeLength = 10000,
    /**
     * A.K.A. `MAX_STACK_SIZE`
     */
    maximumStackDepth = 1000
}
export declare const undefinedOperation: <State extends ExecutionStackState & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => {
    undefined: Operation<State>;
};
export declare const checkLimitsCommon: <State extends ErrorState<Errors, AuthenticationErrorCommon> & StackState<Uint8Array> & AlternateStackState<Uint8Array> & {
    operationCount: number;
}, Errors>(operation: Operation<State>) => Operation<State>;
export declare const commonOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(sha1: Sha1, sha256: Sha256, ripemd160: Ripemd160, secp256k1: Secp256k1, flags: {
    disallowUpgradableNops: boolean;
    requireBugValueZero: boolean;
    requireMinimalEncoding: boolean;
    requireNullSignatureFailures: boolean;
}) => {
    readonly [opcodes: number]: Operation<State>;
};
export declare const cloneStack: (stack: readonly Readonly<Uint8Array>[]) => Uint8Array[];
export declare const createAuthenticationProgramInternalStateCommon: <Opcodes, Errors>(instructions: readonly AuthenticationInstruction<Opcodes>[], stack?: Uint8Array[]) => AuthenticationProgramInternalStateCommon<Opcodes, Errors, Uint8Array>;
export declare const createAuthenticationProgramExternalStateCommon: (program: AuthenticationProgramCommon) => AuthenticationProgramExternalStateCommon;
export declare const createAuthenticationProgramStateCommon: <Opcodes, Errors>(instructions: readonly AuthenticationInstruction<Opcodes>[], stack: Uint8Array[], externalState: AuthenticationProgramExternalStateCommon) => AuthenticationProgramStateCommon<Opcodes, Errors>;
export declare const cloneAuthenticationProgramStateCommon: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(state: State) => {
    alternateStack: Uint8Array[];
    correspondingOutput: Uint8Array | undefined;
    executionStack: boolean[];
    instructions: AuthenticationInstruction<Opcodes>[];
    ip: number;
    lastCodeSeparator: number;
    locktime: number;
    operationCount: number;
    outpointIndex: number;
    outpointTransactionHash: Uint8Array;
    outputValue: bigint;
    sequenceNumber: number;
    signatureOperationsCount: number;
    stack: Uint8Array[];
    transactionOutpoints: Uint8Array;
    transactionOutputs: Uint8Array;
    transactionSequenceNumbers: Uint8Array;
    version: number;
} | {
    alternateStack: Uint8Array[];
    correspondingOutput: Uint8Array | undefined;
    executionStack: boolean[];
    instructions: AuthenticationInstruction<Opcodes>[];
    ip: number;
    lastCodeSeparator: number;
    locktime: number;
    operationCount: number;
    outpointIndex: number;
    outpointTransactionHash: Uint8Array;
    outputValue: bigint;
    sequenceNumber: number;
    signatureOperationsCount: number;
    stack: Uint8Array[];
    transactionOutpoints: Uint8Array;
    transactionOutputs: Uint8Array;
    transactionSequenceNumbers: Uint8Array;
    version: number;
    error: AuthenticationErrorCommon | Errors;
};
/**
 * This is a meaningless but complete `CommonExternalProgramState`, useful for
 * testing and debugging.
 */
export declare const createAuthenticationProgramExternalStateCommonEmpty: () => {
    correspondingOutput: Uint8Array;
    locktime: number;
    outpointIndex: number;
    outpointTransactionHash: Uint8Array;
    outputValue: bigint;
    sequenceNumber: number;
    transactionOutpoints: Uint8Array;
    transactionOutputs: Uint8Array;
    transactionSequenceNumbers: Uint8Array;
    version: number;
};
/**
 * Create an "empty" CommonProgramState, suitable for testing a VM/compiler.
 */
export declare const createAuthenticationProgramStateCommonEmpty: <Opcodes, Errors>(instructions: readonly AuthenticationInstruction<Opcodes>[], stack?: Uint8Array[]) => AuthenticationProgramStateCommon<Opcodes, Errors>;
//# sourceMappingURL=common.d.ts.map