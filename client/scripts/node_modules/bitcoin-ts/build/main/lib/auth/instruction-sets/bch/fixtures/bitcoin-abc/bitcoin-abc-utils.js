"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../../../utils/utils");
const common_1 = require("../../../common/common");
const instruction_sets_utils_1 = require("../../../instruction-sets-utils");
const bch_opcodes_1 = require("../../bch-opcodes");
exports.bitcoinABCOpcodes = Object.entries(instruction_sets_utils_1.generateBytecodeMap(bch_opcodes_1.OpcodesBCH)).reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur[0].slice('OP_'.length)]: cur[1] })), {
    PUSHDATA1: Uint8Array.of(bch_opcodes_1.OpcodesBCH.OP_PUSHDATA_1),
    PUSHDATA2: Uint8Array.of(bch_opcodes_1.OpcodesBCH.OP_PUSHDATA_2),
    PUSHDATA4: Uint8Array.of(bch_opcodes_1.OpcodesBCH.OP_PUSHDATA_4)
});
/**
 * Convert a string from Bitcoin ABC's `script_tests.json` text-format to
 * bytecode. The string must be valid â€“ this method attempts to convert all
 * unmatched tokens to `BigInt`s.
 *
 * @internalRemarks
 * This method doesn't use {@link compileScript} because of a slight
 * incompatibility in the languages. In BTL, BigIntLiterals are a primitive
 * type, and must be surrounded by a push statement (e.g. `<100>`) to push a
 * number to the stack. In the `script_tests.json` text-format, numbers are
 * assumed to be pushed. We could implement a transformation after the
 * compiler's parse step, but because this format doesn't require any other
 * features of the compiler, we opt to implement this as a simple method.
 * @param abcScript the script in Bitcoin ABC's `script_tests.json` text-format
 */
exports.assembleBitcoinABCScript = (abcScript) => utils_1.flattenBinArray(abcScript
    .split(' ')
    .filter(token => token !== '')
    .map(token => token.startsWith('0x')
    ? utils_1.hexToBin(token.slice('0x'.length))
    : token.startsWith("'")
        ? common_1.encodeDataPush(utils_1.utf8ToBin(token.slice(1, token.length - 1)))
        : exports.bitcoinABCOpcodes[token] === undefined
            ? common_1.encodeDataPush(common_1.bigIntToScriptNumber(BigInt(token)))
            : exports.bitcoinABCOpcodes[token]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbi1hYmMtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9iY2gvZml4dHVyZXMvYml0Y29pbi1hYmMvYml0Y29pbi1hYmMtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFJb0M7QUFDcEMsbURBQThFO0FBQzlFLDRFQUFzRTtBQUN0RSxtREFBK0M7QUFFbEMsUUFBQSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUM3Qyw0Q0FBbUIsQ0FBQyx3QkFBVSxDQUFDLENBQ2hDLENBQUMsTUFBTSxDQUVMLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsaUNBQU0sR0FBRyxLQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUcsRUFBRTtJQUNuRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyx3QkFBVSxDQUFDLGFBQWEsQ0FBQztJQUNsRCxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyx3QkFBVSxDQUFDLGFBQWEsQ0FBQztJQUNsRCxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyx3QkFBVSxDQUFDLGFBQWEsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFFSDs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNVLFFBQUEsd0JBQXdCLEdBQUcsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FDNUQsdUJBQWUsQ0FDYixTQUFTO0tBQ04sS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7S0FDN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ1gsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDcEIsQ0FBQyxDQUFDLGdCQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyx1QkFBYyxDQUFDLGlCQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBRSx5QkFBaUIsQ0FBQyxLQUFLLENBQTRCLEtBQUssU0FBUztZQUNwRSxDQUFDLENBQUMsdUJBQWMsQ0FBQyw2QkFBb0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDLENBQUMseUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQzdCLENBQ0osQ0FBQyJ9