import { AuthenticationProgramStateCommon, ErrorState, StackState } from '../../state';
import { OpcodesCommon } from './opcodes';
export declare const op1Add: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const op1Sub: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNegate: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opAbs: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNot: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const op0NotEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opAdd: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opSub: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opBoolAnd: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opBoolOr: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumEqualVerify: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opNumNotEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opLessThan: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opLessThanOrEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opGreaterThan: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opGreaterThanOrEqual: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opMin: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opMax: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opWithin: <State extends StackState<Uint8Array> & ErrorState<Errors, import("./errors").AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const arithmeticOperations: <Opcodes, State extends AuthenticationProgramStateCommon<Opcodes, Errors>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    [OpcodesCommon.OP_1ADD]: (state: State) => State;
    [OpcodesCommon.OP_1SUB]: (state: State) => State;
    [OpcodesCommon.OP_NEGATE]: (state: State) => State;
    [OpcodesCommon.OP_ABS]: (state: State) => State;
    [OpcodesCommon.OP_NOT]: (state: State) => State;
    [OpcodesCommon.OP_0NOTEQUAL]: (state: State) => State;
    [OpcodesCommon.OP_ADD]: (state: State) => State;
    [OpcodesCommon.OP_SUB]: (state: State) => State;
    [OpcodesCommon.OP_BOOLAND]: (state: State) => State;
    [OpcodesCommon.OP_BOOLOR]: (state: State) => State;
    [OpcodesCommon.OP_NUMEQUAL]: (state: State) => State;
    [OpcodesCommon.OP_NUMEQUALVERIFY]: (state: State) => State;
    [OpcodesCommon.OP_NUMNOTEQUAL]: (state: State) => State;
    [OpcodesCommon.OP_LESSTHAN]: (state: State) => State;
    [OpcodesCommon.OP_LESSTHANOREQUAL]: (state: State) => State;
    [OpcodesCommon.OP_GREATERTHAN]: (state: State) => State;
    [OpcodesCommon.OP_GREATERTHANOREQUAL]: (state: State) => State;
    [OpcodesCommon.OP_MIN]: (state: State) => State;
    [OpcodesCommon.OP_MAX]: (state: State) => State;
    [OpcodesCommon.OP_WITHIN]: (state: State) => State;
};
//# sourceMappingURL=arithmetic.d.ts.map