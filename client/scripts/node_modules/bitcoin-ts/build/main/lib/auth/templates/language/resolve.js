"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils/utils");
const instruction_sets_1 = require("../../instruction-sets/instruction-sets");
const compile_1 = require("./compile");
const pluckRange = (node) => ({
    endColumn: node.end.column,
    endLineNumber: node.end.line,
    startColumn: node.start.column,
    startLineNumber: node.start.line
});
var IdentifierResolutionType;
(function (IdentifierResolutionType) {
    IdentifierResolutionType["opcode"] = "opcode";
    IdentifierResolutionType["variable"] = "variable";
    IdentifierResolutionType["script"] = "script";
})(IdentifierResolutionType = exports.IdentifierResolutionType || (exports.IdentifierResolutionType = {}));
var Constants;
(function (Constants) {
    Constants[Constants["hexByte"] = 2] = "hexByte";
})(Constants || (Constants = {}));
exports.resolveScriptSegment = (segment, resolveIdentifiers) => {
    // eslint-disable-next-line complexity
    const resolved = segment.value.map(child => {
        const range = pluckRange(child);
        switch (child.name) {
            case 'Identifier': {
                const identifier = child.value;
                const result = resolveIdentifiers(identifier);
                const ret = result.status
                    ? Object.assign({ range, type: 'bytecode', value: result.bytecode }, (result.type === IdentifierResolutionType.opcode
                        ? {
                            opcode: identifier
                        }
                        : result.type === IdentifierResolutionType.variable
                            ? {
                                variable: identifier
                            }
                            : // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                                result.type === IdentifierResolutionType.script
                                    ? { script: identifier, source: result.source }
                                    : { unknown: identifier })) : {
                    range,
                    type: 'error',
                    value: result.error
                };
                return ret;
            }
            case 'Push':
                return {
                    range,
                    type: 'push',
                    value: exports.resolveScriptSegment(child.value, resolveIdentifiers)
                };
            case 'Evaluation':
                return {
                    range,
                    type: 'evaluation',
                    value: exports.resolveScriptSegment(child.value, resolveIdentifiers)
                };
            case 'BigIntLiteral':
                return {
                    literalType: 'BigIntLiteral',
                    range,
                    type: 'bytecode',
                    value: instruction_sets_1.bigIntToScriptNumber(child.value)
                };
            case 'HexLiteral':
                return child.value.length % Constants.hexByte === 0
                    ? {
                        literalType: 'HexLiteral',
                        range,
                        type: 'bytecode',
                        value: utils_1.hexToBin(child.value)
                    }
                    : {
                        range,
                        type: 'error',
                        value: `Improperly formed HexLiteral. HexLiteral must have a length divisible by 2, but this HexLiteral has a length of ${child.value.length}.`
                    };
            case 'UTF8Literal':
                return {
                    literalType: 'UTF8Literal',
                    range,
                    type: 'bytecode',
                    value: utils_1.utf8ToBin(child.value)
                };
            case 'Comment':
                return {
                    range,
                    type: 'comment',
                    value: child.value
                };
            default:
                return {
                    range,
                    type: 'error',
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    value: `Unrecognized segment: ${child.name}`
                };
        }
    });
    return resolved.length === 0
        ? [{ range: pluckRange(segment), type: 'comment', value: '' }]
        : resolved;
};
var Time;
(function (Time) {
    Time[Time["msPerLocktimeSecond"] = 1000] = "msPerLocktimeSecond";
})(Time || (Time = {}));
const dateToLockTime = (date) => instruction_sets_1.bigIntToScriptNumber(BigInt(Math.round(date.getTime() / Time.msPerLocktimeSecond)));
const articleAndVariableType = (variableType) => `${variableType === 'HDKey' ? 'an' : 'a'} ${variableType}`;
const attemptCompilerOperation = (identifier, operationId, variableType, environment, data) => {
    if (environment.operations !== undefined) {
        const operationsForType = environment.operations[variableType];
        if (operationsForType !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const operation = operationsForType[operationId];
            if (operation !== undefined) {
                return operation(identifier, data, environment);
            }
        }
    }
    return `Identifer "${identifier}" refers to ${articleAndVariableType(variableType)} operation "${operationId}" which is not available to this compiler.`;
};
const variableTypeToDataProperty = {
    AddressData: 'addressData',
    HDKey: 'hdKeys',
    Key: 'keys',
    WalletData: 'walletData'
};
const defaultActionByVariableType = {
    AddressData: (identifier, data, variableId) => data.addressData !== undefined &&
        data.addressData[variableId] !== undefined
        ? data.addressData[variableId]
        : `Identifier "${identifier}" refers to an AddressData, but no AddressData for "${variableId}" were provided in the compilation data.`,
    HDKey: identifier => `Identifier "${identifier}" refers to an HDKey, but does not specify an operation, e.g. "${identifier}.public_key".`,
    Key: identifier => `Identifier "${identifier}" refers to a Key, but does not specify an operation, e.g. "${identifier}.public_key".`,
    WalletData: (identifier, data, variableId) => data.walletData !== undefined &&
        data.walletData[variableId] !== undefined
        ? data.walletData[variableId]
        : `Identifier "${identifier}" refers to a WalletData, but no WalletData for "${variableId}" were provided in the compilation data.`
};
const aOrAnQuotedString = (word) => `${['a', 'e', 'i', 'o', 'u'].includes(word[0].toLowerCase()) ? 'an' : 'a'} "${word}"`;
var BuiltInVariables;
(function (BuiltInVariables) {
    BuiltInVariables["currentBlockTime"] = "current_block_time";
    BuiltInVariables["currentBlockHeight"] = "current_block_height";
    BuiltInVariables["signingSerialization"] = "signing_serialization";
})(BuiltInVariables = exports.BuiltInVariables || (exports.BuiltInVariables = {}));
/**
 * If the identifer can be successfully resolved as a variable, the result is
 * returned as a Uint8Array. If the identifier references a known variable, but
 * an error occurs in resolving it, the error is returned as a string.
 * Otherwise, the identifier is not recognized as a variable, and this method
 * simply returns `false`.
 */
// eslint-disable-next-line complexity
exports.resolveAuthenticationTemplateVariable = (identifier, environment, data) => {
    var _a;
    const splitId = identifier.split('.');
    const variableId = splitId[0]; // eslint-disable-line prefer-destructuring
    const operationId = splitId[1];
    switch (variableId) {
        case BuiltInVariables.currentBlockHeight:
            return data.currentBlockHeight === undefined
                ? 'Tried to resolve the built-in variable "current_block_height", but the "currentBlockHeight" property was not provided in the compilation data.'
                : instruction_sets_1.bigIntToScriptNumber(BigInt(data.currentBlockHeight));
        case BuiltInVariables.currentBlockTime:
            return data.currentBlockTime === undefined
                ? 'Tried to resolve the built-in variable "current_block_time", but the "currentBlockTime" property was not provided in the compilation data.'
                : dateToLockTime(data.currentBlockTime);
        case BuiltInVariables.signingSerialization:
            return operationId === undefined
                ? 'Tried to resolve an operation for the built-in variable "signing_serialization", but no operation was provided. Provide an operation like "signing_serialization.[operation]".'
                : attemptCompilerOperation(identifier, operationId, 'SigningSerialization', environment, data);
        default: {
            const selected = (_a = environment.variables) === null || _a === void 0 ? void 0 : _a[variableId];
            if (selected === undefined) {
                return false;
            }
            return data[variableTypeToDataProperty[selected.type]] === undefined
                ? `Identifier "${identifier}" is a ${selected.type}, but the compilation data does not include ${aOrAnQuotedString(variableTypeToDataProperty[selected.type])} property.`
                : operationId === undefined
                    ? defaultActionByVariableType[selected.type](identifier, data, variableId)
                    : attemptCompilerOperation(identifier, operationId, selected.type, environment, data);
        }
    }
};
/**
 * Compile an internal script identifier.
 *
 * @remarks
 * If the identifer can be successfully resolved as a script, the script is
 * compiled and returned as a CompilationResultSuccess. If an error occurs in
 * compiling it, the error is returned as a string.
 *
 * Otherwise, the identifier is not recognized as a script, and this method
 * simply returns `false`.
 *
 * @param identifier the identifier of the script to be resolved
 * @param data the provided CompilationData
 * @param environment the provided CompilationEnvironment
 * @param parentIdentifier the identifier of the script which references the
 * script being resolved (for detecting circular dependencies)
 */
// eslint-disable-next-line complexity
exports.resolveScriptIdentifier = (identifier, data, environment, parentIdentifier) => {
    if (environment.scripts[identifier] === undefined) {
        return false;
    }
    if (parentIdentifier !== undefined &&
        environment.sourceScriptIds !== undefined &&
        environment.sourceScriptIds.includes(parentIdentifier)) {
        return `A circular dependency was encountered. Script "${identifier}" relies on itself to be generated. (Parent scripts: ${environment.sourceScriptIds.join(', ')})`;
    }
    const result = compile_1.compileScript(identifier, data, Object.assign(Object.assign({}, environment), { sourceScriptIds: [
            ...(environment.sourceScriptIds === undefined
                ? []
                : environment.sourceScriptIds),
            ...(parentIdentifier === undefined ? [] : [parentIdentifier])
        ] }));
    return result.success
        ? result
        : `Compilation error in resolved script, ${identifier}: ${result.errors
            .map(({ error, range }) => `${error} [${range.startLineNumber}, ${range.startColumn}]`)
            .join(', ')}`;
};
/**
 * Return an `IdentifierResolutionFunction` for use in `resolveScriptSegment`.
 *
 * @param scriptId the `id` of the script for which the resulting
 * `IdentifierResolutionFunction` will be used.
 * @param environment a snapshot of the context around `scriptId`. See
 * `CompilationEnvironment` for details.
 * @param data the actual variable values (private keys, shared wallet data,
 * shared address data, etc.) to use in resolving variables.
 */
exports.createIdentifierResolver = (scriptId, data, environment) => 
// eslint-disable-next-line complexity
(identifier) => {
    var _a;
    const opcodeResult = (_a = environment.opcodes) === null || _a === void 0 ? void 0 : _a[identifier];
    if (opcodeResult !== undefined) {
        return {
            bytecode: opcodeResult,
            status: true,
            type: IdentifierResolutionType.opcode
        };
    }
    const variableResult = exports.resolveAuthenticationTemplateVariable(identifier, environment, data);
    if (variableResult !== false) {
        return typeof variableResult === 'string'
            ? { error: variableResult, status: false }
            : {
                bytecode: variableResult,
                status: true,
                type: IdentifierResolutionType.variable
            };
    }
    const scriptResult = exports.resolveScriptIdentifier(identifier, data, environment, scriptId);
    if (scriptResult !== false) {
        return typeof scriptResult === 'string'
            ? { error: scriptResult, status: false }
            : {
                bytecode: scriptResult.bytecode,
                source: scriptResult.resolve,
                status: true,
                type: IdentifierResolutionType.script
            };
    }
    return { error: `Unknown identifier '${identifier}'.`, status: false };
};
//# sourceMappingURL=data:application/json;base64,