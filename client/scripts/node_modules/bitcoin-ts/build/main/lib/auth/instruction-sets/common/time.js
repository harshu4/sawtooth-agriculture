"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
var Bits;
(function (Bits) {
    Bits[Bits["sequenceLocktimeDisableFlag"] = 31] = "sequenceLocktimeDisableFlag";
    Bits[Bits["sequenceLocktimeTypeFlag"] = 22] = "sequenceLocktimeTypeFlag";
})(Bits || (Bits = {}));
var Constants;
(function (Constants) {
    Constants[Constants["LocktimeScriptNumberByteLength"] = 5] = "LocktimeScriptNumberByteLength";
    Constants[Constants["LocktimeThreshold"] = 500000000] = "LocktimeThreshold";
    Constants[Constants["maximumSequenceNumber"] = 4294967295] = "maximumSequenceNumber";
    Constants[Constants["sequenceLocktimeTransactionVersionMinimum"] = 2] = "sequenceLocktimeTransactionVersionMinimum";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeDisableFlag"] = 2147483648] = "sequenceLocktimeDisableFlag";
    // eslint-disable-next-line no-bitwise
    Constants[Constants["sequenceLocktimeTypeFlag"] = 4194304] = "sequenceLocktimeTypeFlag";
    Constants[Constants["sequenceGranularity"] = 9] = "sequenceGranularity";
    Constants[Constants["sequenceLocktimeMask"] = 65535] = "sequenceLocktimeMask";
})(Constants || (Constants = {}));
exports.readLocktime = (state, operation, flags) => {
    const item = state.stack[state.stack.length - 1];
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
    }
    const parsedLocktime = common_1.parseBytesAsScriptNumber(item, flags.requireMinimalEncoding, Constants.LocktimeScriptNumberByteLength);
    if (common_1.isScriptNumberError(parsedLocktime)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    const locktime = Number(parsedLocktime);
    if (locktime < 0) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.negativeLocktime, state);
    }
    return operation(state, locktime);
};
const locktimeTypesAreCompatible = (locktime, requiredLocktime) => (locktime < Constants.LocktimeThreshold &&
    requiredLocktime < Constants.LocktimeThreshold) ||
    (locktime >= Constants.LocktimeThreshold &&
        requiredLocktime >= Constants.LocktimeThreshold);
exports.opCheckLockTimeVerify = (flags) => (state) => exports.readLocktime(state, (nextState, requiredLocktime) => {
    if (!locktimeTypesAreCompatible(nextState.locktime, requiredLocktime)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.incompatibleLocktimeType, nextState);
    }
    if (requiredLocktime > nextState.locktime) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unsatisfiedLocktime, nextState);
    }
    if (nextState.sequenceNumber === Constants.maximumSequenceNumber) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.locktimeDisabled, nextState);
    }
    return nextState;
}, flags);
// eslint-disable-next-line no-bitwise
const includesFlag = (value, flag) => (value & flag) !== 0;
exports.opCheckSequenceVerify = (flags) => (state) => exports.readLocktime(state, 
// eslint-disable-next-line complexity
(nextState, requiredSequence) => {
    const sequenceLocktimeDisabled = includesFlag(requiredSequence, Constants.sequenceLocktimeDisableFlag);
    if (sequenceLocktimeDisabled) {
        return nextState;
    }
    if (nextState.version < Constants.sequenceLocktimeTransactionVersionMinimum) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.checkSequenceUnavailable, nextState);
    }
    if (includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeDisableFlag)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unmatchedSequenceDisable, nextState);
    }
    if (includesFlag(requiredSequence, Constants.sequenceLocktimeTypeFlag) !==
        includesFlag(nextState.sequenceNumber, Constants.sequenceLocktimeTypeFlag)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.incompatibleSequenceType, nextState);
    }
    if (
    // eslint-disable-next-line no-bitwise
    (requiredSequence & Constants.sequenceLocktimeMask) >
        // eslint-disable-next-line no-bitwise
        (nextState.sequenceNumber & Constants.sequenceLocktimeMask)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.unsatisfiedSequenceNumber, nextState);
    }
    return nextState;
}, flags);
exports.timeOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_CHECKLOCKTIMEVERIFY]: exports.opCheckLockTimeVerify(flags),
    [opcodes_1.OpcodesCommon.OP_CHECKSEQUENCEVERIFY]: exports.opCheckSequenceVerify(flags)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYXV0aC9pbnN0cnVjdGlvbi1zZXRzL2NvbW1vbi90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEscUNBQXlFO0FBQ3pFLHFDQUFpRTtBQUNqRSx1Q0FBMEM7QUFFMUMsSUFBSyxJQUdKO0FBSEQsV0FBSyxJQUFJO0lBQ1AsOEVBQWdDLENBQUE7SUFDaEMsd0VBQTZCLENBQUE7QUFDL0IsQ0FBQyxFQUhJLElBQUksS0FBSixJQUFJLFFBR1I7QUFFRCxJQUFLLFNBV0o7QUFYRCxXQUFLLFNBQVM7SUFDWiw2RkFBa0MsQ0FBQTtJQUNsQywyRUFBK0IsQ0FBQTtJQUMvQixvRkFBa0MsQ0FBQTtJQUNsQyxtSEFBNkMsQ0FBQTtJQUM3QyxzQ0FBc0M7SUFDdEMsZ0dBQTJFLENBQUE7SUFDM0Usc0NBQXNDO0lBQ3RDLHVGQUE2RCxDQUFBO0lBQzdELHVFQUF1QixDQUFBO0lBQ3ZCLDZFQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFYSSxTQUFTLEtBQVQsU0FBUyxRQVdiO0FBRVksUUFBQSxZQUFZLEdBQUcsQ0FJMUIsS0FBWSxFQUNaLFNBQXdELEVBQ3hELEtBRUMsRUFDRCxFQUFFO0lBQ0YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQTJCLENBQUM7SUFDM0UsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1FBQ3RCLE9BQU8sbUJBQVUsQ0FDZixrQ0FBeUIsQ0FBQyxVQUFVLEVBQ3BDLEtBQUssQ0FDTixDQUFDO0tBQ0g7SUFDRCxNQUFNLGNBQWMsR0FBRyxpQ0FBd0IsQ0FDN0MsSUFBSSxFQUNKLEtBQUssQ0FBQyxzQkFBc0IsRUFDNUIsU0FBUyxDQUFDLDhCQUE4QixDQUN6QyxDQUFDO0lBQ0YsSUFBSSw0QkFBbUIsQ0FBQyxjQUFjLENBQUMsRUFBRTtR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