"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
const errors_1 = require("./errors");
exports.incrementOperationCount = (operation) => (state) => {
    const nextState = operation(state);
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.operationCount += 1;
    return nextState;
};
exports.conditionallyEvaluate = (operation) => (state) => state.executionStack.every(item => item) ? operation(state) : state;
/**
 * Map a function over each operation in an `InstructionSet.operations` object,
 * assigning the result to the same `opcode` in the resulting object.
 * @param operations an operations map from an `InstructionSet`
 * @param combinator a function to apply to each operation
 */
exports.mapOverOperations = (operations, ...combinators) => Object.keys(operations).reduce((result, operation) => (Object.assign(Object.assign({}, result), { [operation]: combinators.reduce((op, combinator) => combinator(op), operations[parseInt(operation, 10)]) })), {});
/**
 * Pop one stack item off of `state.stack` and provide that item to `operation`.
 */
exports.useOneStackItem = (state, operation) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.stack.pop();
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyStack, state);
    }
    return operation(state, item);
};
exports.useTwoStackItems = (state, operation) => exports.useOneStackItem(state, (nextState, valueTwo) => exports.useOneStackItem(nextState, (lastState, valueTop) => operation(lastState, valueTop, valueTwo)));
exports.useThreeStackItems = (state, operation) => exports.useOneStackItem(state, (nextState, valueThree) => exports.useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree)));
exports.useFourStackItems = (state, operation) => exports.useTwoStackItems(state, (nextState, valueThree, valueFour) => exports.useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree, valueFour)));
exports.useSixStackItems = (state, operation) => exports.useFourStackItems(state, (nextState, valueThree, valueFour, valueFive, valueSix) => exports.useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree, valueFour, valueFive, valueSix)));
const normalMaximumScriptNumberByteLength = 4;
exports.useOneScriptNumber = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => exports.useOneStackItem(state, (nextState, item) => {
    const value = common_1.parseBytesAsScriptNumber(item, requireMinimalEncoding, maximumScriptNumberByteLength);
    if (common_1.isScriptNumberError(value)) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    return operation(nextState, value);
});
exports.useTwoScriptNumbers = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => exports.useOneScriptNumber(state, (nextState, secondValue) => exports.useOneScriptNumber(nextState, (lastState, firstValue) => operation(lastState, firstValue, secondValue), requireMinimalEncoding, maximumScriptNumberByteLength), requireMinimalEncoding, maximumScriptNumberByteLength);
exports.useThreeScriptNumbers = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => exports.useTwoScriptNumbers(state, (nextState, secondValue, thirdValue) => exports.useOneScriptNumber(nextState, (lastState, firstValue) => operation(lastState, firstValue, secondValue, thirdValue), requireMinimalEncoding, maximumScriptNumberByteLength), requireMinimalEncoding, maximumScriptNumberByteLength);
/**
 * Return the provided state with the provided value pushed to its stack.
 * @param state the state to update and return
 * @param data the value to push to the stack
 */
exports.pushToStack = (state, ...data) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.stack.push(...data);
    return state;
};
// TODO: if firstOperation errors, secondOperation might overwrite the error
exports.combineOperations = (firstOperation, secondOperation) => (state) => secondOperation(firstOperation(state));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9jb21tb24vY29tYmluYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxxQ0FBeUU7QUFDekUscUNBQWlFO0FBRXBELFFBQUEsdUJBQXVCLEdBQUcsQ0FHckMsU0FBMkIsRUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUN0QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMseUZBQXlGO0lBQ3pGLFNBQVMsQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDO0lBQzlCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVXLFFBQUEscUJBQXFCLEdBQUcsQ0FDbkMsU0FBMkIsRUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUN0QyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUV0RTs7Ozs7R0FLRztBQUNVLFFBQUEsaUJBQWlCLEdBQUcsQ0FDL0IsVUFBaUQsRUFDakQsR0FBRyxXQUFrRSxFQUNyRSxFQUFFLENBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBRzVCLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsaUNBQ2xCLE1BQU0sS0FDVCxDQUFDLFNBQVMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQzdCLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNsQyxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFF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