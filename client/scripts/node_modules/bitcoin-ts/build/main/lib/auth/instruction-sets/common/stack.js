"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combinators_1 = require("./combinators");
const errors_1 = require("./errors");
const opcodes_1 = require("./opcodes");
const types_1 = require("./types");
exports.opToAltStack = () => (state) => combinators_1.useOneStackItem(state, (nextState, item) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.alternateStack.push(item);
    return nextState;
});
exports.opFromAltStack = () => (state) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.alternateStack.pop();
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.emptyAlternateStack, state);
    }
    return combinators_1.pushToStack(state, item);
};
exports.op2Drop = () => (state) => combinators_1.useTwoStackItems(state, nextState => nextState);
exports.op2Dup = () => (state) => combinators_1.useTwoStackItems(state, (nextState, a, b) => combinators_1.pushToStack(nextState, a, b, a.slice(), b.slice()));
exports.op3Dup = () => (state) => combinators_1.useThreeStackItems(state, (nextState, a, b, c) => combinators_1.pushToStack(nextState, a, b, c, a.slice(), b.slice(), c.slice()));
exports.op2Over = () => (state) => combinators_1.useFourStackItems(state, (nextState, a, b, c, d) => combinators_1.pushToStack(nextState, a, b, c, d, a.slice(), b.slice()));
exports.op2Rot = () => (state) => combinators_1.useSixStackItems(state, (nextState, a, b, c, d, e, f) => combinators_1.pushToStack(nextState, c, d, e, f, a, b));
exports.op2Swap = () => (state) => combinators_1.useFourStackItems(state, (nextState, a, b, c, d) => combinators_1.pushToStack(nextState, c, d, a, b));
exports.opIfDup = () => (state) => combinators_1.useOneStackItem(state, (nextState, item) => combinators_1.pushToStack(nextState, ...(types_1.stackItemIsTruthy(item) ? [item, item.slice()] : [item])));
exports.opDepth = () => (state) => combinators_1.pushToStack(state, types_1.bigIntToScriptNumber(BigInt(state.stack.length)));
exports.opDrop = () => (state) => combinators_1.useOneStackItem(state, nextState => nextState);
exports.opDup = () => (state) => combinators_1.useOneStackItem(state, (nextState, item) => combinators_1.pushToStack(nextState, item, item.slice()));
exports.opNip = () => (state) => combinators_1.useTwoStackItems(state, (nextState, _, b) => combinators_1.pushToStack(nextState, b));
exports.opOver = () => (state) => combinators_1.useTwoStackItems(state, (nextState, a, b) => combinators_1.pushToStack(nextState, a, b, a.slice()));
exports.opPick = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, depth) => {
    const item = nextState.stack[nextState.stack.length - 1 - Number(depth)];
    if (item === undefined) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidStackIndex, state);
    }
    return combinators_1.pushToStack(nextState, item.slice());
}, flags.requireMinimalEncoding);
exports.opRoll = (flags) => (state) => combinators_1.useOneScriptNumber(state, (nextState, depth) => {
    const index = nextState.stack.length - 1 - Number(depth);
    if (index < 0 || index > nextState.stack.length - 1) {
        return errors_1.applyError(errors_1.AuthenticationErrorCommon.invalidStackIndex, state);
    }
    // eslint-disable-next-line functional/immutable-data
    return combinators_1.pushToStack(nextState, nextState.stack.splice(index, 1)[0]);
}, flags.requireMinimalEncoding);
exports.opRot = () => (state) => combinators_1.useThreeStackItems(state, (nextState, a, b, c) => combinators_1.pushToStack(nextState, b, c, a));
exports.opSwap = () => (state) => combinators_1.useTwoStackItems(state, (nextState, a, b) => combinators_1.pushToStack(nextState, b, a));
exports.opTuck = () => (state) => combinators_1.useTwoStackItems(state, (nextState, a, b) => combinators_1.pushToStack(nextState, b.slice(), a, b));
exports.stackOperations = (flags) => ({
    [opcodes_1.OpcodesCommon.OP_TOALTSTACK]: exports.opToAltStack(),
    [opcodes_1.OpcodesCommon.OP_FROMALTSTACK]: exports.opFromAltStack(),
    [opcodes_1.OpcodesCommon.OP_2DROP]: exports.op2Drop(),
    [opcodes_1.OpcodesCommon.OP_2DUP]: exports.op2Dup(),
    [opcodes_1.OpcodesCommon.OP_3DUP]: exports.op3Dup(),
    [opcodes_1.OpcodesCommon.OP_2OVER]: exports.op2Over(),
    [opcodes_1.OpcodesCommon.OP_2ROT]: exports.op2Rot(),
    [opcodes_1.OpcodesCommon.OP_2SWAP]: exports.op2Swap(),
    [opcodes_1.OpcodesCommon.OP_IFDUP]: exports.opIfDup(),
    [opcodes_1.OpcodesCommon.OP_DEPTH]: exports.opDepth(),
    [opcodes_1.OpcodesCommon.OP_DROP]: exports.opDrop(),
    [opcodes_1.OpcodesCommon.OP_DUP]: exports.opDup(),
    [opcodes_1.OpcodesCommon.OP_NIP]: exports.opNip(),
    [opcodes_1.OpcodesCommon.OP_OVER]: exports.opOver(),
    [opcodes_1.OpcodesCommon.OP_PICK]: exports.opPick(flags),
    [opcodes_1.OpcodesCommon.OP_ROLL]: exports.opRoll(flags),
    [opcodes_1.OpcodesCommon.OP_ROT]: exports.opRot(),
    [opcodes_1.OpcodesCommon.OP_SWAP]: exports.opSwap(),
    [opcodes_1.OpcodesCommon.OP_TUCK]: exports.opTuck()
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9jb21tb24vc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwrQ0FRdUI7QUFDdkIscUNBQWlFO0FBQ2pFLHVDQUEwQztBQUMxQyxtQ0FBa0U7QUFFckQsUUFBQSxZQUFZLEdBQUcsR0FFeEIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDdEIsNkJBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekMseUZBQXlGO0lBQ3pGLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRVEsUUFBQSxjQUFjLEdBQUcsR0FHMUIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDdEIscURBQXFEO0lBQ3JELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1FBQ3RCLE9BQU8sbUJBQVUsQ0FDZixrQ0FBeUIsQ0FBQyxtQkFBbUIsRUFDN0MsS0FBSyxDQUNOLENBQUM7S0FDSDtJQUNELE9BQU8seUJBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRVcsUUFBQSxPQUFPLEdBQUcsR0FBNkIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDdEUsOEJBQWdCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFckMsUUFBQSxNQUFNLEdBQUcsR0FBNkIsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDckUsOEJBQWdCLENBQUMs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