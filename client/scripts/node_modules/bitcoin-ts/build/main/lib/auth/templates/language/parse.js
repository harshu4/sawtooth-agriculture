"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const P = __importStar(require("./parsimmon.js"));
/**
 * TODO: `@types/parsimmon` is not in use because of some early hacks. Ideally,
 * this can be cleaned up by converting parsimmon.js to TypeScript, and trimming
 * out the parts we don't need.
 */
/* eslint-disable sort-keys */
const authenticationScriptParser = P.createLanguage({
    script: r => P.seqMap(P.optWhitespace, r.expression.sepBy(P.optWhitespace).node('Script'), P.optWhitespace, (_, expressions) => expressions),
    expression: r => P.alt(r.comment, r.push, r.evaluation, r.utf8, r.hex, r.bigint, r.identifier),
    comment: r => P.alt(r.singleLineComment, r.multiLineComment).node('Comment'),
    singleLineComment: () => P.seqMap(P.string('//').desc("the start of a single-line comment ('//')"), P.regexp(/[^\n]*/u), (__, comment) => comment.trim()),
    multiLineComment: () => P.seqMap(P.string('/*').desc("the start of a multi-line comment ('/*')"), P.regexp(/[\s\S]*(?=\*\/)/u).desc("the end of this multi-line comment ('*/')"), P.string('*/'), (__, comment) => comment.trim()),
    push: r => P.seqMap(P.string('<').desc("the start of a push statement ('<')"), r.script, P.string('>').desc("the end of this push statement ('>')"), (_, push) => push).node('Push'),
    evaluation: r => P.seqMap(P.string('$').desc("the start of an evaluation ('$')"), P.string('(').desc("the opening parenthesis of this evaluation ('(')"), r.script, P.string(')').desc("the closing parenthesis of this evaluation (')')"), (_, __, evaluation) => evaluation).node('Evaluation'),
    identifier: () => P.regexp(/[a-zA-Z_][.a-zA-Z0-9_-]*/u)
        .desc('a valid identifier')
        .node('Identifier'),
    utf8: () => P.alt(P.seqMap(P.string('"').desc('a double quote (")'), P.regexp(/[^"]*/u), P.string('"').desc('a closing double quote (")'), (__, literal) => literal), P.seqMap(P.string("'").desc("a single quote (')"), P.regexp(/[^']*/u), P.string("'").desc("a closing single quote (')"), (__, literal) => literal)).node('UTF8Literal'),
    hex: () => P.seqMap(P.string('0x').desc("a hex literal ('0x...')"), P.regexp(/(?:[0-9a-f]{2})+/iu).desc('a valid hexadecimal string'), (__, literal) => literal).node('HexLiteral'),
    bigint: () => P.regexp(/-?[0-9]+/u)
        .desc('an integer literal')
        .map(BigInt)
        .node('BigIntLiteral')
});
exports.parseScript = (script) => authenticationScriptParser.script.parse(script);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvdGVtcGxhdGVzL2xhbmd1YWdlL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLGtEQUFvQztBQUVwQzs7OztHQUlHO0FBQ0gsOEJBQThCO0FBQzlCLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQztJQUNsRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FDVixDQUFDLENBQUMsTUFBTSxDQUNOLENBQUMsQ0FBQyxhQUFhLEVBQ2YsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDbEQsQ0FBQyxDQUFDLGFBQWEsRUFDZixDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FDaEM7SUFDSCxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FDZCxDQUFDLENBQUMsR0FBRyxDQUNILENBQUMsQ0FBQyxPQUFPLEVBQ1QsQ0FBQyxDQUFDLElBQUksRUFDTixDQUFDLENBQUMsVUFBVSxFQUNaLENBQUMsQ0FBQyxJQUFJLEVBQ04sQ0FBQyxDQUFDLEdBQUcsRUFDTCxDQUFDLENBQUMsTUFBTSxFQUNSLENBQUMsQ0FBQyxVQUFVLENBQ2I7SUFDSCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzVFLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUN0QixDQUFDLENBQUMsTUFBTSxDQUNOLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLDJDQUEyQyxDQUFDLEVBQ2hFLENBQUMsQ0FB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