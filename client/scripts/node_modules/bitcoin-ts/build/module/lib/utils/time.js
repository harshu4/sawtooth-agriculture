import { bigIntToScriptNumber, parseBytesAsScriptNumber } from '../auth/instruction-sets/common/types';
var Constants;
(function (Constants) {
    Constants[Constants["msPerLocktimeSecond"] = 1000] = "msPerLocktimeSecond";
    Constants[Constants["minimumTimestamp"] = 500000000] = "minimumTimestamp";
})(Constants || (Constants = {}));
/**
 * Convert a Javascript `Date` object to its equivalent LockTime
 * representation in an `AuthenticationVirtualMachine`.
 *
 * TODO: this method should error past the overflow Date and for dates which
 * would become BlockHeights when encoded.
 *
 * @param date the Date to convert to a BlockTime Uint8Array
 */
export const dateToLockTime = (date) => bigIntToScriptNumber(BigInt(Math.round(date.getTime() / Constants.msPerLocktimeSecond)));
/**
 * Parse a locktime, returning a `number` for block heights, a `Date` for block
 * times, and a string for parsing errors.
 *
 * Note: this method does not check the length of locktime
 *
 * @param bin the 4-byte Uint8Array locktime to parse
 */
export const parseLockTime = (bin) => {
    const parsed = parseBytesAsScriptNumber(bin);
    return typeof parsed === 'string'
        ? parsed
        : parsed >= BigInt(Constants.minimumTimestamp)
            ? new Date(Number(parsed) * Constants.msPerLocktimeSecond)
            : Number(parsed);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbHMvdGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLHdCQUF3QixFQUN6QixNQUFNLHVDQUF1QyxDQUFDO0FBRS9DLElBQUssU0FHSjtBQUhELFdBQUssU0FBUztJQUNaLDBFQUEwQixDQUFBO0lBQzFCLHlFQUE0QixDQUFBO0FBQzlCLENBQUMsRUFISSxTQUFTLEtBQVQsU0FBUyxRQUdiO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUMzQyxvQkFBb0IsQ0FDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQ25FLENBQUM7QUFFSjs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBZSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsT0FBTyxPQUFPLE1BQU0sS0FBSyxRQUFRO1FBQy9CLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1lBQzlDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDO1lBQzFELENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDIn0=