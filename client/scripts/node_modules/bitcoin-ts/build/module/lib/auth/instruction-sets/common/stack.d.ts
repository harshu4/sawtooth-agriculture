import { AlternateStackState, ErrorState, StackState } from '../../state';
import { AuthenticationErrorCommon } from './errors';
import { OpcodesCommon } from './opcodes';
export declare const opToAltStack: <State extends StackState<Uint8Array> & AlternateStackState<Uint8Array>>() => (state: State) => State;
export declare const opFromAltStack: <State extends StackState<Uint8Array> & AlternateStackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>() => (state: State) => State;
export declare const op2Drop: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const op2Dup: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const op3Dup: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const op2Over: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const op2Rot: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const op2Swap: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opIfDup: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opDepth: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opDrop: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opDup: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opNip: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opOver: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opPick: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opRoll: <State extends StackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => (state: State) => State;
export declare const opRot: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opSwap: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const opTuck: <State extends StackState<Uint8Array>>() => (state: State) => State;
export declare const stackOperations: <State extends StackState<Uint8Array> & AlternateStackState<Uint8Array> & ErrorState<Errors, AuthenticationErrorCommon>, Errors>(flags: {
    requireMinimalEncoding: boolean;
}) => {
    [OpcodesCommon.OP_TOALTSTACK]: (state: State) => State;
    [OpcodesCommon.OP_FROMALTSTACK]: (state: State) => State;
    [OpcodesCommon.OP_2DROP]: (state: State) => State;
    [OpcodesCommon.OP_2DUP]: (state: State) => State;
    [OpcodesCommon.OP_3DUP]: (state: State) => State;
    [OpcodesCommon.OP_2OVER]: (state: State) => State;
    [OpcodesCommon.OP_2ROT]: (state: State) => State;
    [OpcodesCommon.OP_2SWAP]: (state: State) => State;
    [OpcodesCommon.OP_IFDUP]: (state: State) => State;
    [OpcodesCommon.OP_DEPTH]: (state: State) => State;
    [OpcodesCommon.OP_DROP]: (state: State) => State;
    [OpcodesCommon.OP_DUP]: (state: State) => State;
    [OpcodesCommon.OP_NIP]: (state: State) => State;
    [OpcodesCommon.OP_OVER]: (state: State) => State;
    [OpcodesCommon.OP_PICK]: (state: State) => State;
    [OpcodesCommon.OP_ROLL]: (state: State) => State;
    [OpcodesCommon.OP_ROT]: (state: State) => State;
    [OpcodesCommon.OP_SWAP]: (state: State) => State;
    [OpcodesCommon.OP_TUCK]: (state: State) => State;
};
//# sourceMappingURL=stack.d.ts.map