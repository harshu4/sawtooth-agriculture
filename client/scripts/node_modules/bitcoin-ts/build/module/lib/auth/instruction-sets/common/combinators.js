import { isScriptNumberError, parseBytesAsScriptNumber } from './common';
import { applyError, AuthenticationErrorCommon } from './errors';
export const incrementOperationCount = (operation) => (state) => {
    const nextState = operation(state);
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    nextState.operationCount += 1;
    return nextState;
};
export const conditionallyEvaluate = (operation) => (state) => state.executionStack.every(item => item) ? operation(state) : state;
/**
 * Map a function over each operation in an `InstructionSet.operations` object,
 * assigning the result to the same `opcode` in the resulting object.
 * @param operations an operations map from an `InstructionSet`
 * @param combinator a function to apply to each operation
 */
export const mapOverOperations = (operations, ...combinators) => Object.keys(operations).reduce((result, operation) => ({
    ...result,
    [operation]: combinators.reduce((op, combinator) => combinator(op), operations[parseInt(operation, 10)])
}), {});
/**
 * Pop one stack item off of `state.stack` and provide that item to `operation`.
 */
export const useOneStackItem = (state, operation) => {
    // eslint-disable-next-line functional/immutable-data
    const item = state.stack.pop();
    if (item === undefined) {
        return applyError(AuthenticationErrorCommon.emptyStack, state);
    }
    return operation(state, item);
};
export const useTwoStackItems = (state, operation) => useOneStackItem(state, (nextState, valueTwo) => useOneStackItem(nextState, (lastState, valueTop) => operation(lastState, valueTop, valueTwo)));
export const useThreeStackItems = (state, operation) => useOneStackItem(state, (nextState, valueThree) => useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree)));
export const useFourStackItems = (state, operation) => useTwoStackItems(state, (nextState, valueThree, valueFour) => useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree, valueFour)));
export const useSixStackItems = (state, operation) => useFourStackItems(state, (nextState, valueThree, valueFour, valueFive, valueSix) => useTwoStackItems(nextState, (lastState, valueTop, valueTwo) => operation(lastState, valueTop, valueTwo, valueThree, valueFour, valueFive, valueSix)));
const normalMaximumScriptNumberByteLength = 4;
export const useOneScriptNumber = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => useOneStackItem(state, (nextState, item) => {
    const value = parseBytesAsScriptNumber(item, requireMinimalEncoding, maximumScriptNumberByteLength);
    if (isScriptNumberError(value)) {
        return applyError(AuthenticationErrorCommon.invalidScriptNumber, state);
    }
    return operation(nextState, value);
});
export const useTwoScriptNumbers = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => useOneScriptNumber(state, (nextState, secondValue) => useOneScriptNumber(nextState, (lastState, firstValue) => operation(lastState, firstValue, secondValue), requireMinimalEncoding, maximumScriptNumberByteLength), requireMinimalEncoding, maximumScriptNumberByteLength);
export const useThreeScriptNumbers = (state, operation, requireMinimalEncoding, maximumScriptNumberByteLength = normalMaximumScriptNumberByteLength) => useTwoScriptNumbers(state, (nextState, secondValue, thirdValue) => useOneScriptNumber(nextState, (lastState, firstValue) => operation(lastState, firstValue, secondValue, thirdValue), requireMinimalEncoding, maximumScriptNumberByteLength), requireMinimalEncoding, maximumScriptNumberByteLength);
/**
 * Return the provided state with the provided value pushed to its stack.
 * @param state the state to update and return
 * @param data the value to push to the stack
 */
export const pushToStack = (state, ...data) => {
    // eslint-disable-next-line functional/no-expression-statement, functional/immutable-data
    state.stack.push(...data);
    return state;
};
// TODO: if firstOperation errors, secondOperation might overwrite the error
export const combineOperations = (firstOperation, secondOperation) => (state) => secondOperation(firstOperation(state));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2F1dGgvaW5zdHJ1Y3Rpb24tc2V0cy9jb21tb24vY29tYmluYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxVQUFVLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FHckMsU0FBMkIsRUFDVCxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUN0QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMseUZBQXlGO0lBQ3pGLFNBQVMsQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDO0lBQzlCLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQ25DLFNBQTJCLEVBQ1QsRUFBRSxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDdEMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFFdEU7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUMvQixVQUFpRCxFQUNqRCxHQUFHLFdBQWtFLEVBQ3JFLEVBQUUsQ0FDRixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FHNUIsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLEdBQUcsTUFBTTtJQUNULENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQ2xDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ3BDO0NBQ0YsQ0FBQyxFQUNGLEVBQUUsQ0FDSCxDQUFDO0FBRUo7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FJN0IsS0FBWSxFQUNaLFNBQXlELEVBQ3pELEVBQUU7SUFDRixxREFBcUQ7SUFDckQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMvQixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsT0FBTyxVQUFVLENBQ2YseUJBQXlCLENBQUMsVUFBVSxFQUNwQyxLQUFLLENBQ04sQ0FBQztLQUNIO0lBQ0QsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBSTlCLEtBQVksRUFDWixTQUlVLEVBQ1YsRUFBRSxDQUNGLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FDN0MsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUNqRCxTQUFTLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FDekMsQ0FDRixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FJaEMsS0FBWSxFQUNaLFNBS1UsRUFDVixFQUFFLENBQ0YsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUMvQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQzVELFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FDckQsQ0FDRixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FJL0IsS0FBWSxFQUNaLFNBTVUsRUFDVixFQUFFLENBQ0YsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUMzRCxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQzVELFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQ2hFLENBQ0YsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBSTlCLEtBQVksRUFDWixTQVFVLEVBQ1YsRUFBRSxDQUNGLGlCQUFpQixDQUNmLEtBQUssRUFDTCxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUN4RCxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQzVELFNBQVMsQ0FDUCxTQUFTLEVBQ1QsUUFBUSxFQUNSLFFBQVEsRUFDUixVQUFVLEVBQ1YsU0FBUyxFQUNULFNBQVMsRUFDVCxRQUFRLENBQ1QsQ0FDRixDQUNKLENBQUM7QUFFSixNQUFNLG1DQUFtQyxHQUFHLENBQUMsQ0FBQztBQUU5QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUloQyxLQUFZLEVBQ1osU0FBcUQsRUFDckQsc0JBQStCLEVBQy9CLDZCQUE2QixHQUFHLG1DQUFtQyxFQUNuRSxFQUFFLENBQ0YsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUN6QyxNQUFNLEtBQUssR0FBRyx3QkFBd0IsQ0FDcEMsSUFBSSxFQUNKLHNCQUFzQixFQUN0Qiw2QkFBNkIsQ0FDOUIsQ0FBQztJQUNGLElBQUksbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDOUIsT0FBTyxVQUFVLENBQ2YseUJBQXlCLENBQUMsbUJBQW1CLEVBQzdDLEtBQUssQ0FDTixDQUFDO0tBQ0g7SUFDRCxPQUFPLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDLENBQUM7QUFFTCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUlqQyxLQUFZLEVBQ1osU0FJVSxFQUNWLHNCQUErQixFQUMvQiw2QkFBNkIsR0FBRyxtQ0FBbUMsRUFDbkUsRUFBRSxDQUNGLGtCQUFrQixDQUNoQixLQUFLLEVBQ0wsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FDekIsa0JBQWtCLENBQ2hCLFNBQVMsRUFDVCxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUN4QixTQUFTLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFDL0Msc0JBQXNCLEVBQ3RCLDZCQUE2QixDQUM5QixFQUNILHNCQUFzQixFQUN0Qiw2QkFBNkIsQ0FDOUIsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBSW5DLEtBQVksRUFDWixTQUtVLEVBQ1Ysc0JBQStCLEVBQy9CLDZCQUE2QixHQUFHLG1DQUFtQyxFQUNuRSxFQUFFLENBQ0YsbUJBQW1CLENBQ2pCLEtBQUssRUFDTCxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FDckMsa0JBQWtCLENBQ2hCLFNBQVMsRUFDVCxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUN4QixTQUFTLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEVBQzNELHNCQUFzQixFQUN0Qiw2QkFBNkIsQ0FDOUIsRUFDSCxzQkFBc0IsRUFDdEIsNkJBQTZCLENBQzlCLENBQUM7QUFFSjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLEtBQVksRUFDWixHQUFHLElBQWtCLEVBQ3JCLEVBQUU7SUFDRix5RkFBeUY7SUFDekYsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMxQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLDRFQUE0RTtBQUM1RSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUMvQixjQUFnQyxFQUNoQyxlQUFpQyxFQUNqQyxFQUFFLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyJ9